// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hmertakyatan/gymapi/ent/personnel"
	"github.com/hmertakyatan/gymapi/ent/personnelrelcustomer"
	"github.com/hmertakyatan/gymapi/ent/predicate"
)

// PersonnelUpdate is the builder for updating Personnel entities.
type PersonnelUpdate struct {
	config
	hooks    []Hook
	mutation *PersonnelMutation
}

// Where appends a list predicates to the PersonnelUpdate builder.
func (pu *PersonnelUpdate) Where(ps ...predicate.Personnel) *PersonnelUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PersonnelUpdate) SetName(s string) *PersonnelUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *PersonnelUpdate) SetNillableName(s *string) *PersonnelUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetSalary sets the "salary" field.
func (pu *PersonnelUpdate) SetSalary(f float64) *PersonnelUpdate {
	pu.mutation.ResetSalary()
	pu.mutation.SetSalary(f)
	return pu
}

// SetNillableSalary sets the "salary" field if the given value is not nil.
func (pu *PersonnelUpdate) SetNillableSalary(f *float64) *PersonnelUpdate {
	if f != nil {
		pu.SetSalary(*f)
	}
	return pu
}

// AddSalary adds f to the "salary" field.
func (pu *PersonnelUpdate) AddSalary(f float64) *PersonnelUpdate {
	pu.mutation.AddSalary(f)
	return pu
}

// SetDescription sets the "description" field.
func (pu *PersonnelUpdate) SetDescription(s string) *PersonnelUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *PersonnelUpdate) SetNillableDescription(s *string) *PersonnelUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// SetBithDate sets the "bith_date" field.
func (pu *PersonnelUpdate) SetBithDate(t time.Time) *PersonnelUpdate {
	pu.mutation.SetBithDate(t)
	return pu
}

// SetNillableBithDate sets the "bith_date" field if the given value is not nil.
func (pu *PersonnelUpdate) SetNillableBithDate(t *time.Time) *PersonnelUpdate {
	if t != nil {
		pu.SetBithDate(*t)
	}
	return pu
}

// SetStartDate sets the "start_date" field.
func (pu *PersonnelUpdate) SetStartDate(t time.Time) *PersonnelUpdate {
	pu.mutation.SetStartDate(t)
	return pu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (pu *PersonnelUpdate) SetNillableStartDate(t *time.Time) *PersonnelUpdate {
	if t != nil {
		pu.SetStartDate(*t)
	}
	return pu
}

// SetStatus sets the "status" field.
func (pu *PersonnelUpdate) SetStatus(b bool) *PersonnelUpdate {
	pu.mutation.SetStatus(b)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PersonnelUpdate) SetNillableStatus(b *bool) *PersonnelUpdate {
	if b != nil {
		pu.SetStatus(*b)
	}
	return pu
}

// AddPersonnelRelCustomerIDs adds the "personnel_rel_customer" edge to the PersonnelRelCustomer entity by IDs.
func (pu *PersonnelUpdate) AddPersonnelRelCustomerIDs(ids ...uuid.UUID) *PersonnelUpdate {
	pu.mutation.AddPersonnelRelCustomerIDs(ids...)
	return pu
}

// AddPersonnelRelCustomer adds the "personnel_rel_customer" edges to the PersonnelRelCustomer entity.
func (pu *PersonnelUpdate) AddPersonnelRelCustomer(p ...*PersonnelRelCustomer) *PersonnelUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddPersonnelRelCustomerIDs(ids...)
}

// Mutation returns the PersonnelMutation object of the builder.
func (pu *PersonnelUpdate) Mutation() *PersonnelMutation {
	return pu.mutation
}

// ClearPersonnelRelCustomer clears all "personnel_rel_customer" edges to the PersonnelRelCustomer entity.
func (pu *PersonnelUpdate) ClearPersonnelRelCustomer() *PersonnelUpdate {
	pu.mutation.ClearPersonnelRelCustomer()
	return pu
}

// RemovePersonnelRelCustomerIDs removes the "personnel_rel_customer" edge to PersonnelRelCustomer entities by IDs.
func (pu *PersonnelUpdate) RemovePersonnelRelCustomerIDs(ids ...uuid.UUID) *PersonnelUpdate {
	pu.mutation.RemovePersonnelRelCustomerIDs(ids...)
	return pu
}

// RemovePersonnelRelCustomer removes "personnel_rel_customer" edges to PersonnelRelCustomer entities.
func (pu *PersonnelUpdate) RemovePersonnelRelCustomer(p ...*PersonnelRelCustomer) *PersonnelUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemovePersonnelRelCustomerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PersonnelUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonnelUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonnelUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonnelUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PersonnelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(personnel.Table, personnel.Columns, sqlgraph.NewFieldSpec(personnel.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(personnel.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Salary(); ok {
		_spec.SetField(personnel.FieldSalary, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.AddedSalary(); ok {
		_spec.AddField(personnel.FieldSalary, field.TypeFloat64, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(personnel.FieldDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.BithDate(); ok {
		_spec.SetField(personnel.FieldBithDate, field.TypeTime, value)
	}
	if value, ok := pu.mutation.StartDate(); ok {
		_spec.SetField(personnel.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(personnel.FieldStatus, field.TypeBool, value)
	}
	if pu.mutation.PersonnelRelCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.PersonnelRelCustomerTable,
			Columns: []string{personnel.PersonnelRelCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPersonnelRelCustomerIDs(); len(nodes) > 0 && !pu.mutation.PersonnelRelCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.PersonnelRelCustomerTable,
			Columns: []string{personnel.PersonnelRelCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PersonnelRelCustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.PersonnelRelCustomerTable,
			Columns: []string{personnel.PersonnelRelCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personnel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PersonnelUpdateOne is the builder for updating a single Personnel entity.
type PersonnelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonnelMutation
}

// SetName sets the "name" field.
func (puo *PersonnelUpdateOne) SetName(s string) *PersonnelUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *PersonnelUpdateOne) SetNillableName(s *string) *PersonnelUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetSalary sets the "salary" field.
func (puo *PersonnelUpdateOne) SetSalary(f float64) *PersonnelUpdateOne {
	puo.mutation.ResetSalary()
	puo.mutation.SetSalary(f)
	return puo
}

// SetNillableSalary sets the "salary" field if the given value is not nil.
func (puo *PersonnelUpdateOne) SetNillableSalary(f *float64) *PersonnelUpdateOne {
	if f != nil {
		puo.SetSalary(*f)
	}
	return puo
}

// AddSalary adds f to the "salary" field.
func (puo *PersonnelUpdateOne) AddSalary(f float64) *PersonnelUpdateOne {
	puo.mutation.AddSalary(f)
	return puo
}

// SetDescription sets the "description" field.
func (puo *PersonnelUpdateOne) SetDescription(s string) *PersonnelUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *PersonnelUpdateOne) SetNillableDescription(s *string) *PersonnelUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// SetBithDate sets the "bith_date" field.
func (puo *PersonnelUpdateOne) SetBithDate(t time.Time) *PersonnelUpdateOne {
	puo.mutation.SetBithDate(t)
	return puo
}

// SetNillableBithDate sets the "bith_date" field if the given value is not nil.
func (puo *PersonnelUpdateOne) SetNillableBithDate(t *time.Time) *PersonnelUpdateOne {
	if t != nil {
		puo.SetBithDate(*t)
	}
	return puo
}

// SetStartDate sets the "start_date" field.
func (puo *PersonnelUpdateOne) SetStartDate(t time.Time) *PersonnelUpdateOne {
	puo.mutation.SetStartDate(t)
	return puo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (puo *PersonnelUpdateOne) SetNillableStartDate(t *time.Time) *PersonnelUpdateOne {
	if t != nil {
		puo.SetStartDate(*t)
	}
	return puo
}

// SetStatus sets the "status" field.
func (puo *PersonnelUpdateOne) SetStatus(b bool) *PersonnelUpdateOne {
	puo.mutation.SetStatus(b)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PersonnelUpdateOne) SetNillableStatus(b *bool) *PersonnelUpdateOne {
	if b != nil {
		puo.SetStatus(*b)
	}
	return puo
}

// AddPersonnelRelCustomerIDs adds the "personnel_rel_customer" edge to the PersonnelRelCustomer entity by IDs.
func (puo *PersonnelUpdateOne) AddPersonnelRelCustomerIDs(ids ...uuid.UUID) *PersonnelUpdateOne {
	puo.mutation.AddPersonnelRelCustomerIDs(ids...)
	return puo
}

// AddPersonnelRelCustomer adds the "personnel_rel_customer" edges to the PersonnelRelCustomer entity.
func (puo *PersonnelUpdateOne) AddPersonnelRelCustomer(p ...*PersonnelRelCustomer) *PersonnelUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddPersonnelRelCustomerIDs(ids...)
}

// Mutation returns the PersonnelMutation object of the builder.
func (puo *PersonnelUpdateOne) Mutation() *PersonnelMutation {
	return puo.mutation
}

// ClearPersonnelRelCustomer clears all "personnel_rel_customer" edges to the PersonnelRelCustomer entity.
func (puo *PersonnelUpdateOne) ClearPersonnelRelCustomer() *PersonnelUpdateOne {
	puo.mutation.ClearPersonnelRelCustomer()
	return puo
}

// RemovePersonnelRelCustomerIDs removes the "personnel_rel_customer" edge to PersonnelRelCustomer entities by IDs.
func (puo *PersonnelUpdateOne) RemovePersonnelRelCustomerIDs(ids ...uuid.UUID) *PersonnelUpdateOne {
	puo.mutation.RemovePersonnelRelCustomerIDs(ids...)
	return puo
}

// RemovePersonnelRelCustomer removes "personnel_rel_customer" edges to PersonnelRelCustomer entities.
func (puo *PersonnelUpdateOne) RemovePersonnelRelCustomer(p ...*PersonnelRelCustomer) *PersonnelUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemovePersonnelRelCustomerIDs(ids...)
}

// Where appends a list predicates to the PersonnelUpdate builder.
func (puo *PersonnelUpdateOne) Where(ps ...predicate.Personnel) *PersonnelUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PersonnelUpdateOne) Select(field string, fields ...string) *PersonnelUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Personnel entity.
func (puo *PersonnelUpdateOne) Save(ctx context.Context) (*Personnel, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonnelUpdateOne) SaveX(ctx context.Context) *Personnel {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonnelUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonnelUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PersonnelUpdateOne) sqlSave(ctx context.Context) (_node *Personnel, err error) {
	_spec := sqlgraph.NewUpdateSpec(personnel.Table, personnel.Columns, sqlgraph.NewFieldSpec(personnel.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Personnel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personnel.FieldID)
		for _, f := range fields {
			if !personnel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != personnel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(personnel.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Salary(); ok {
		_spec.SetField(personnel.FieldSalary, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.AddedSalary(); ok {
		_spec.AddField(personnel.FieldSalary, field.TypeFloat64, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(personnel.FieldDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.BithDate(); ok {
		_spec.SetField(personnel.FieldBithDate, field.TypeTime, value)
	}
	if value, ok := puo.mutation.StartDate(); ok {
		_spec.SetField(personnel.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(personnel.FieldStatus, field.TypeBool, value)
	}
	if puo.mutation.PersonnelRelCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.PersonnelRelCustomerTable,
			Columns: []string{personnel.PersonnelRelCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPersonnelRelCustomerIDs(); len(nodes) > 0 && !puo.mutation.PersonnelRelCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.PersonnelRelCustomerTable,
			Columns: []string{personnel.PersonnelRelCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PersonnelRelCustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.PersonnelRelCustomerTable,
			Columns: []string{personnel.PersonnelRelCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Personnel{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personnel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
