// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hmertakyatan/gymapi/ent/customer"
	"github.com/hmertakyatan/gymapi/ent/membership"
	"github.com/hmertakyatan/gymapi/ent/personnelrelcustomer"
)

// CustomerCreate is the builder for creating a Customer entity.
type CustomerCreate struct {
	config
	mutation *CustomerMutation
	hooks    []Hook
}

// SetFullName sets the "full_name" field.
func (cc *CustomerCreate) SetFullName(s string) *CustomerCreate {
	cc.mutation.SetFullName(s)
	return cc
}

// SetBirthDate sets the "birth_date" field.
func (cc *CustomerCreate) SetBirthDate(t time.Time) *CustomerCreate {
	cc.mutation.SetBirthDate(t)
	return cc
}

// SetRegistrationDate sets the "registration_date" field.
func (cc *CustomerCreate) SetRegistrationDate(t time.Time) *CustomerCreate {
	cc.mutation.SetRegistrationDate(t)
	return cc
}

// SetNillableRegistrationDate sets the "registration_date" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableRegistrationDate(t *time.Time) *CustomerCreate {
	if t != nil {
		cc.SetRegistrationDate(*t)
	}
	return cc
}

// SetCustomerPictureURL sets the "customer_picture_url" field.
func (cc *CustomerCreate) SetCustomerPictureURL(s string) *CustomerCreate {
	cc.mutation.SetCustomerPictureURL(s)
	return cc
}

// SetNillableCustomerPictureURL sets the "customer_picture_url" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableCustomerPictureURL(s *string) *CustomerCreate {
	if s != nil {
		cc.SetCustomerPictureURL(*s)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *CustomerCreate) SetStatus(b bool) *CustomerCreate {
	cc.mutation.SetStatus(b)
	return cc
}

// SetID sets the "id" field.
func (cc *CustomerCreate) SetID(u uuid.UUID) *CustomerCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CustomerCreate) SetNillableID(u *uuid.UUID) *CustomerCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// AddMembershipIDs adds the "membership" edge to the Membership entity by IDs.
func (cc *CustomerCreate) AddMembershipIDs(ids ...uuid.UUID) *CustomerCreate {
	cc.mutation.AddMembershipIDs(ids...)
	return cc
}

// AddMembership adds the "membership" edges to the Membership entity.
func (cc *CustomerCreate) AddMembership(m ...*Membership) *CustomerCreate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cc.AddMembershipIDs(ids...)
}

// AddPersonnelRelCustomerIDs adds the "personnel_rel_customer" edge to the PersonnelRelCustomer entity by IDs.
func (cc *CustomerCreate) AddPersonnelRelCustomerIDs(ids ...uuid.UUID) *CustomerCreate {
	cc.mutation.AddPersonnelRelCustomerIDs(ids...)
	return cc
}

// AddPersonnelRelCustomer adds the "personnel_rel_customer" edges to the PersonnelRelCustomer entity.
func (cc *CustomerCreate) AddPersonnelRelCustomer(p ...*PersonnelRelCustomer) *CustomerCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddPersonnelRelCustomerIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cc *CustomerCreate) Mutation() *CustomerMutation {
	return cc.mutation
}

// Save creates the Customer in the database.
func (cc *CustomerCreate) Save(ctx context.Context) (*Customer, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CustomerCreate) SaveX(ctx context.Context) *Customer {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CustomerCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CustomerCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CustomerCreate) defaults() {
	if _, ok := cc.mutation.RegistrationDate(); !ok {
		v := customer.DefaultRegistrationDate
		cc.mutation.SetRegistrationDate(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := customer.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CustomerCreate) check() error {
	if _, ok := cc.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`ent: missing required field "Customer.full_name"`)}
	}
	if _, ok := cc.mutation.BirthDate(); !ok {
		return &ValidationError{Name: "birth_date", err: errors.New(`ent: missing required field "Customer.birth_date"`)}
	}
	if _, ok := cc.mutation.RegistrationDate(); !ok {
		return &ValidationError{Name: "registration_date", err: errors.New(`ent: missing required field "Customer.registration_date"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Customer.status"`)}
	}
	return nil
}

func (cc *CustomerCreate) sqlSave(ctx context.Context) (*Customer, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CustomerCreate) createSpec() (*Customer, *sqlgraph.CreateSpec) {
	var (
		_node = &Customer{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(customer.Table, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.FullName(); ok {
		_spec.SetField(customer.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := cc.mutation.BirthDate(); ok {
		_spec.SetField(customer.FieldBirthDate, field.TypeTime, value)
		_node.BirthDate = value
	}
	if value, ok := cc.mutation.RegistrationDate(); ok {
		_spec.SetField(customer.FieldRegistrationDate, field.TypeTime, value)
		_node.RegistrationDate = value
	}
	if value, ok := cc.mutation.CustomerPictureURL(); ok {
		_spec.SetField(customer.FieldCustomerPictureURL, field.TypeString, value)
		_node.CustomerPictureURL = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(customer.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	if nodes := cc.mutation.MembershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.MembershipTable,
			Columns: []string{customer.MembershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PersonnelRelCustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PersonnelRelCustomerTable,
			Columns: []string{customer.PersonnelRelCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CustomerCreateBulk is the builder for creating many Customer entities in bulk.
type CustomerCreateBulk struct {
	config
	err      error
	builders []*CustomerCreate
}

// Save creates the Customer entities in the database.
func (ccb *CustomerCreateBulk) Save(ctx context.Context) ([]*Customer, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Customer, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CustomerCreateBulk) SaveX(ctx context.Context) []*Customer {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CustomerCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
