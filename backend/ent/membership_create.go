// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hmertakyatan/gymapi/ent/customer"
	"github.com/hmertakyatan/gymapi/ent/membership"
)

// MembershipCreate is the builder for creating a Membership entity.
type MembershipCreate struct {
	config
	mutation *MembershipMutation
	hooks    []Hook
}

// SetOperationDate sets the "operation_date" field.
func (mc *MembershipCreate) SetOperationDate(t time.Time) *MembershipCreate {
	mc.mutation.SetOperationDate(t)
	return mc
}

// SetNillableOperationDate sets the "operation_date" field if the given value is not nil.
func (mc *MembershipCreate) SetNillableOperationDate(t *time.Time) *MembershipCreate {
	if t != nil {
		mc.SetOperationDate(*t)
	}
	return mc
}

// SetStartDate sets the "start_date" field.
func (mc *MembershipCreate) SetStartDate(t time.Time) *MembershipCreate {
	mc.mutation.SetStartDate(t)
	return mc
}

// SetEndDate sets the "end_date" field.
func (mc *MembershipCreate) SetEndDate(t time.Time) *MembershipCreate {
	mc.mutation.SetEndDate(t)
	return mc
}

// SetAmountPaid sets the "amount_paid" field.
func (mc *MembershipCreate) SetAmountPaid(f float64) *MembershipCreate {
	mc.mutation.SetAmountPaid(f)
	return mc
}

// SetNillableAmountPaid sets the "amount_paid" field if the given value is not nil.
func (mc *MembershipCreate) SetNillableAmountPaid(f *float64) *MembershipCreate {
	if f != nil {
		mc.SetAmountPaid(*f)
	}
	return mc
}

// SetAmountRemaining sets the "amount_remaining" field.
func (mc *MembershipCreate) SetAmountRemaining(f float64) *MembershipCreate {
	mc.mutation.SetAmountRemaining(f)
	return mc
}

// SetID sets the "id" field.
func (mc *MembershipCreate) SetID(u uuid.UUID) *MembershipCreate {
	mc.mutation.SetID(u)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MembershipCreate) SetNillableID(u *uuid.UUID) *MembershipCreate {
	if u != nil {
		mc.SetID(*u)
	}
	return mc
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (mc *MembershipCreate) SetCustomerID(id uuid.UUID) *MembershipCreate {
	mc.mutation.SetCustomerID(id)
	return mc
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (mc *MembershipCreate) SetCustomer(c *Customer) *MembershipCreate {
	return mc.SetCustomerID(c.ID)
}

// Mutation returns the MembershipMutation object of the builder.
func (mc *MembershipCreate) Mutation() *MembershipMutation {
	return mc.mutation
}

// Save creates the Membership in the database.
func (mc *MembershipCreate) Save(ctx context.Context) (*Membership, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MembershipCreate) SaveX(ctx context.Context) *Membership {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MembershipCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MembershipCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MembershipCreate) defaults() {
	if _, ok := mc.mutation.OperationDate(); !ok {
		v := membership.DefaultOperationDate
		mc.mutation.SetOperationDate(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := membership.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MembershipCreate) check() error {
	if _, ok := mc.mutation.OperationDate(); !ok {
		return &ValidationError{Name: "operation_date", err: errors.New(`ent: missing required field "Membership.operation_date"`)}
	}
	if _, ok := mc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Membership.start_date"`)}
	}
	if _, ok := mc.mutation.EndDate(); !ok {
		return &ValidationError{Name: "end_date", err: errors.New(`ent: missing required field "Membership.end_date"`)}
	}
	if _, ok := mc.mutation.AmountRemaining(); !ok {
		return &ValidationError{Name: "amount_remaining", err: errors.New(`ent: missing required field "Membership.amount_remaining"`)}
	}
	if _, ok := mc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "Membership.customer"`)}
	}
	return nil
}

func (mc *MembershipCreate) sqlSave(ctx context.Context) (*Membership, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MembershipCreate) createSpec() (*Membership, *sqlgraph.CreateSpec) {
	var (
		_node = &Membership{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(membership.Table, sqlgraph.NewFieldSpec(membership.FieldID, field.TypeUUID))
	)
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := mc.mutation.OperationDate(); ok {
		_spec.SetField(membership.FieldOperationDate, field.TypeTime, value)
		_node.OperationDate = value
	}
	if value, ok := mc.mutation.StartDate(); ok {
		_spec.SetField(membership.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := mc.mutation.EndDate(); ok {
		_spec.SetField(membership.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := mc.mutation.AmountPaid(); ok {
		_spec.SetField(membership.FieldAmountPaid, field.TypeFloat64, value)
		_node.AmountPaid = value
	}
	if value, ok := mc.mutation.AmountRemaining(); ok {
		_spec.SetField(membership.FieldAmountRemaining, field.TypeFloat64, value)
		_node.AmountRemaining = value
	}
	if nodes := mc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   membership.CustomerTable,
			Columns: []string{membership.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_membership = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MembershipCreateBulk is the builder for creating many Membership entities in bulk.
type MembershipCreateBulk struct {
	config
	err      error
	builders []*MembershipCreate
}

// Save creates the Membership entities in the database.
func (mcb *MembershipCreateBulk) Save(ctx context.Context) ([]*Membership, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Membership, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MembershipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MembershipCreateBulk) SaveX(ctx context.Context) []*Membership {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MembershipCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MembershipCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
