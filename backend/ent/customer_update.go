// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hmertakyatan/gymapi/ent/customer"
	"github.com/hmertakyatan/gymapi/ent/membership"
	"github.com/hmertakyatan/gymapi/ent/personnelrelcustomer"
	"github.com/hmertakyatan/gymapi/ent/predicate"
)

// CustomerUpdate is the builder for updating Customer entities.
type CustomerUpdate struct {
	config
	hooks    []Hook
	mutation *CustomerMutation
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cu *CustomerUpdate) Where(ps ...predicate.Customer) *CustomerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetFullName sets the "full_name" field.
func (cu *CustomerUpdate) SetFullName(s string) *CustomerUpdate {
	cu.mutation.SetFullName(s)
	return cu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableFullName(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetFullName(*s)
	}
	return cu
}

// SetBirthDate sets the "birth_date" field.
func (cu *CustomerUpdate) SetBirthDate(t time.Time) *CustomerUpdate {
	cu.mutation.SetBirthDate(t)
	return cu
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableBirthDate(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetBirthDate(*t)
	}
	return cu
}

// SetRegistrationDate sets the "registration_date" field.
func (cu *CustomerUpdate) SetRegistrationDate(t time.Time) *CustomerUpdate {
	cu.mutation.SetRegistrationDate(t)
	return cu
}

// SetNillableRegistrationDate sets the "registration_date" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableRegistrationDate(t *time.Time) *CustomerUpdate {
	if t != nil {
		cu.SetRegistrationDate(*t)
	}
	return cu
}

// SetCustomerPictureURL sets the "customer_picture_url" field.
func (cu *CustomerUpdate) SetCustomerPictureURL(s string) *CustomerUpdate {
	cu.mutation.SetCustomerPictureURL(s)
	return cu
}

// SetNillableCustomerPictureURL sets the "customer_picture_url" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableCustomerPictureURL(s *string) *CustomerUpdate {
	if s != nil {
		cu.SetCustomerPictureURL(*s)
	}
	return cu
}

// ClearCustomerPictureURL clears the value of the "customer_picture_url" field.
func (cu *CustomerUpdate) ClearCustomerPictureURL() *CustomerUpdate {
	cu.mutation.ClearCustomerPictureURL()
	return cu
}

// SetStatus sets the "status" field.
func (cu *CustomerUpdate) SetStatus(b bool) *CustomerUpdate {
	cu.mutation.SetStatus(b)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CustomerUpdate) SetNillableStatus(b *bool) *CustomerUpdate {
	if b != nil {
		cu.SetStatus(*b)
	}
	return cu
}

// AddMembershipIDs adds the "membership" edge to the Membership entity by IDs.
func (cu *CustomerUpdate) AddMembershipIDs(ids ...uuid.UUID) *CustomerUpdate {
	cu.mutation.AddMembershipIDs(ids...)
	return cu
}

// AddMembership adds the "membership" edges to the Membership entity.
func (cu *CustomerUpdate) AddMembership(m ...*Membership) *CustomerUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.AddMembershipIDs(ids...)
}

// AddPersonnelRelCustomerIDs adds the "personnel_rel_customer" edge to the PersonnelRelCustomer entity by IDs.
func (cu *CustomerUpdate) AddPersonnelRelCustomerIDs(ids ...uuid.UUID) *CustomerUpdate {
	cu.mutation.AddPersonnelRelCustomerIDs(ids...)
	return cu
}

// AddPersonnelRelCustomer adds the "personnel_rel_customer" edges to the PersonnelRelCustomer entity.
func (cu *CustomerUpdate) AddPersonnelRelCustomer(p ...*PersonnelRelCustomer) *CustomerUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPersonnelRelCustomerIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cu *CustomerUpdate) Mutation() *CustomerMutation {
	return cu.mutation
}

// ClearMembership clears all "membership" edges to the Membership entity.
func (cu *CustomerUpdate) ClearMembership() *CustomerUpdate {
	cu.mutation.ClearMembership()
	return cu
}

// RemoveMembershipIDs removes the "membership" edge to Membership entities by IDs.
func (cu *CustomerUpdate) RemoveMembershipIDs(ids ...uuid.UUID) *CustomerUpdate {
	cu.mutation.RemoveMembershipIDs(ids...)
	return cu
}

// RemoveMembership removes "membership" edges to Membership entities.
func (cu *CustomerUpdate) RemoveMembership(m ...*Membership) *CustomerUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.RemoveMembershipIDs(ids...)
}

// ClearPersonnelRelCustomer clears all "personnel_rel_customer" edges to the PersonnelRelCustomer entity.
func (cu *CustomerUpdate) ClearPersonnelRelCustomer() *CustomerUpdate {
	cu.mutation.ClearPersonnelRelCustomer()
	return cu
}

// RemovePersonnelRelCustomerIDs removes the "personnel_rel_customer" edge to PersonnelRelCustomer entities by IDs.
func (cu *CustomerUpdate) RemovePersonnelRelCustomerIDs(ids ...uuid.UUID) *CustomerUpdate {
	cu.mutation.RemovePersonnelRelCustomerIDs(ids...)
	return cu
}

// RemovePersonnelRelCustomer removes "personnel_rel_customer" edges to PersonnelRelCustomer entities.
func (cu *CustomerUpdate) RemovePersonnelRelCustomer(p ...*PersonnelRelCustomer) *CustomerUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePersonnelRelCustomerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CustomerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CustomerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CustomerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.FullName(); ok {
		_spec.SetField(customer.FieldFullName, field.TypeString, value)
	}
	if value, ok := cu.mutation.BirthDate(); ok {
		_spec.SetField(customer.FieldBirthDate, field.TypeTime, value)
	}
	if value, ok := cu.mutation.RegistrationDate(); ok {
		_spec.SetField(customer.FieldRegistrationDate, field.TypeTime, value)
	}
	if value, ok := cu.mutation.CustomerPictureURL(); ok {
		_spec.SetField(customer.FieldCustomerPictureURL, field.TypeString, value)
	}
	if cu.mutation.CustomerPictureURLCleared() {
		_spec.ClearField(customer.FieldCustomerPictureURL, field.TypeString)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(customer.FieldStatus, field.TypeBool, value)
	}
	if cu.mutation.MembershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.MembershipTable,
			Columns: []string{customer.MembershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedMembershipIDs(); len(nodes) > 0 && !cu.mutation.MembershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.MembershipTable,
			Columns: []string{customer.MembershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MembershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.MembershipTable,
			Columns: []string{customer.MembershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PersonnelRelCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PersonnelRelCustomerTable,
			Columns: []string{customer.PersonnelRelCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPersonnelRelCustomerIDs(); len(nodes) > 0 && !cu.mutation.PersonnelRelCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PersonnelRelCustomerTable,
			Columns: []string{customer.PersonnelRelCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PersonnelRelCustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PersonnelRelCustomerTable,
			Columns: []string{customer.PersonnelRelCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CustomerUpdateOne is the builder for updating a single Customer entity.
type CustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomerMutation
}

// SetFullName sets the "full_name" field.
func (cuo *CustomerUpdateOne) SetFullName(s string) *CustomerUpdateOne {
	cuo.mutation.SetFullName(s)
	return cuo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableFullName(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetFullName(*s)
	}
	return cuo
}

// SetBirthDate sets the "birth_date" field.
func (cuo *CustomerUpdateOne) SetBirthDate(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetBirthDate(t)
	return cuo
}

// SetNillableBirthDate sets the "birth_date" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableBirthDate(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetBirthDate(*t)
	}
	return cuo
}

// SetRegistrationDate sets the "registration_date" field.
func (cuo *CustomerUpdateOne) SetRegistrationDate(t time.Time) *CustomerUpdateOne {
	cuo.mutation.SetRegistrationDate(t)
	return cuo
}

// SetNillableRegistrationDate sets the "registration_date" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableRegistrationDate(t *time.Time) *CustomerUpdateOne {
	if t != nil {
		cuo.SetRegistrationDate(*t)
	}
	return cuo
}

// SetCustomerPictureURL sets the "customer_picture_url" field.
func (cuo *CustomerUpdateOne) SetCustomerPictureURL(s string) *CustomerUpdateOne {
	cuo.mutation.SetCustomerPictureURL(s)
	return cuo
}

// SetNillableCustomerPictureURL sets the "customer_picture_url" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableCustomerPictureURL(s *string) *CustomerUpdateOne {
	if s != nil {
		cuo.SetCustomerPictureURL(*s)
	}
	return cuo
}

// ClearCustomerPictureURL clears the value of the "customer_picture_url" field.
func (cuo *CustomerUpdateOne) ClearCustomerPictureURL() *CustomerUpdateOne {
	cuo.mutation.ClearCustomerPictureURL()
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CustomerUpdateOne) SetStatus(b bool) *CustomerUpdateOne {
	cuo.mutation.SetStatus(b)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CustomerUpdateOne) SetNillableStatus(b *bool) *CustomerUpdateOne {
	if b != nil {
		cuo.SetStatus(*b)
	}
	return cuo
}

// AddMembershipIDs adds the "membership" edge to the Membership entity by IDs.
func (cuo *CustomerUpdateOne) AddMembershipIDs(ids ...uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.AddMembershipIDs(ids...)
	return cuo
}

// AddMembership adds the "membership" edges to the Membership entity.
func (cuo *CustomerUpdateOne) AddMembership(m ...*Membership) *CustomerUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.AddMembershipIDs(ids...)
}

// AddPersonnelRelCustomerIDs adds the "personnel_rel_customer" edge to the PersonnelRelCustomer entity by IDs.
func (cuo *CustomerUpdateOne) AddPersonnelRelCustomerIDs(ids ...uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.AddPersonnelRelCustomerIDs(ids...)
	return cuo
}

// AddPersonnelRelCustomer adds the "personnel_rel_customer" edges to the PersonnelRelCustomer entity.
func (cuo *CustomerUpdateOne) AddPersonnelRelCustomer(p ...*PersonnelRelCustomer) *CustomerUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPersonnelRelCustomerIDs(ids...)
}

// Mutation returns the CustomerMutation object of the builder.
func (cuo *CustomerUpdateOne) Mutation() *CustomerMutation {
	return cuo.mutation
}

// ClearMembership clears all "membership" edges to the Membership entity.
func (cuo *CustomerUpdateOne) ClearMembership() *CustomerUpdateOne {
	cuo.mutation.ClearMembership()
	return cuo
}

// RemoveMembershipIDs removes the "membership" edge to Membership entities by IDs.
func (cuo *CustomerUpdateOne) RemoveMembershipIDs(ids ...uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.RemoveMembershipIDs(ids...)
	return cuo
}

// RemoveMembership removes "membership" edges to Membership entities.
func (cuo *CustomerUpdateOne) RemoveMembership(m ...*Membership) *CustomerUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.RemoveMembershipIDs(ids...)
}

// ClearPersonnelRelCustomer clears all "personnel_rel_customer" edges to the PersonnelRelCustomer entity.
func (cuo *CustomerUpdateOne) ClearPersonnelRelCustomer() *CustomerUpdateOne {
	cuo.mutation.ClearPersonnelRelCustomer()
	return cuo
}

// RemovePersonnelRelCustomerIDs removes the "personnel_rel_customer" edge to PersonnelRelCustomer entities by IDs.
func (cuo *CustomerUpdateOne) RemovePersonnelRelCustomerIDs(ids ...uuid.UUID) *CustomerUpdateOne {
	cuo.mutation.RemovePersonnelRelCustomerIDs(ids...)
	return cuo
}

// RemovePersonnelRelCustomer removes "personnel_rel_customer" edges to PersonnelRelCustomer entities.
func (cuo *CustomerUpdateOne) RemovePersonnelRelCustomer(p ...*PersonnelRelCustomer) *CustomerUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePersonnelRelCustomerIDs(ids...)
}

// Where appends a list predicates to the CustomerUpdate builder.
func (cuo *CustomerUpdateOne) Where(ps ...predicate.Customer) *CustomerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CustomerUpdateOne) Select(field string, fields ...string) *CustomerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Customer entity.
func (cuo *CustomerUpdateOne) Save(ctx context.Context) (*Customer, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CustomerUpdateOne) SaveX(ctx context.Context) *Customer {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CustomerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CustomerUpdateOne) sqlSave(ctx context.Context) (_node *Customer, err error) {
	_spec := sqlgraph.NewUpdateSpec(customer.Table, customer.Columns, sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Customer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customer.FieldID)
		for _, f := range fields {
			if !customer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.FullName(); ok {
		_spec.SetField(customer.FieldFullName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.BirthDate(); ok {
		_spec.SetField(customer.FieldBirthDate, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.RegistrationDate(); ok {
		_spec.SetField(customer.FieldRegistrationDate, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.CustomerPictureURL(); ok {
		_spec.SetField(customer.FieldCustomerPictureURL, field.TypeString, value)
	}
	if cuo.mutation.CustomerPictureURLCleared() {
		_spec.ClearField(customer.FieldCustomerPictureURL, field.TypeString)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(customer.FieldStatus, field.TypeBool, value)
	}
	if cuo.mutation.MembershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.MembershipTable,
			Columns: []string{customer.MembershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedMembershipIDs(); len(nodes) > 0 && !cuo.mutation.MembershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.MembershipTable,
			Columns: []string{customer.MembershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MembershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.MembershipTable,
			Columns: []string{customer.MembershipColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(membership.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PersonnelRelCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PersonnelRelCustomerTable,
			Columns: []string{customer.PersonnelRelCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPersonnelRelCustomerIDs(); len(nodes) > 0 && !cuo.mutation.PersonnelRelCustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PersonnelRelCustomerTable,
			Columns: []string{customer.PersonnelRelCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PersonnelRelCustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   customer.PersonnelRelCustomerTable,
			Columns: []string{customer.PersonnelRelCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Customer{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
