// Code generated by ent, DO NOT EDIT.

package personnel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the personnel type in the database.
	Label = "personnel"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSalary holds the string denoting the salary field in the database.
	FieldSalary = "salary"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldBithDate holds the string denoting the bith_date field in the database.
	FieldBithDate = "bith_date"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgePersonnelRelCustomer holds the string denoting the personnel_rel_customer edge name in mutations.
	EdgePersonnelRelCustomer = "personnel_rel_customer"
	// Table holds the table name of the personnel in the database.
	Table = "personnels"
	// PersonnelRelCustomerTable is the table that holds the personnel_rel_customer relation/edge.
	PersonnelRelCustomerTable = "personnel_rel_customers"
	// PersonnelRelCustomerInverseTable is the table name for the PersonnelRelCustomer entity.
	// It exists in this package in order to avoid circular dependency with the "personnelrelcustomer" package.
	PersonnelRelCustomerInverseTable = "personnel_rel_customers"
	// PersonnelRelCustomerColumn is the table column denoting the personnel_rel_customer relation/edge.
	PersonnelRelCustomerColumn = "personnel_personnel_rel_customer"
)

// Columns holds all SQL columns for personnel fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSalary,
	FieldDescription,
	FieldBithDate,
	FieldStartDate,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStartDate holds the default value on creation for the "start_date" field.
	DefaultStartDate time.Time
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Personnel queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySalary orders the results by the salary field.
func BySalary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSalary, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByBithDate orders the results by the bith_date field.
func ByBithDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBithDate, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPersonnelRelCustomerCount orders the results by personnel_rel_customer count.
func ByPersonnelRelCustomerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPersonnelRelCustomerStep(), opts...)
	}
}

// ByPersonnelRelCustomer orders the results by personnel_rel_customer terms.
func ByPersonnelRelCustomer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonnelRelCustomerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPersonnelRelCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonnelRelCustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PersonnelRelCustomerTable, PersonnelRelCustomerColumn),
	)
}
