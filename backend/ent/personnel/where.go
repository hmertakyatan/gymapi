// Code generated by ent, DO NOT EDIT.

package personnel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/hmertakyatan/gymapi/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Personnel {
	return predicate.Personnel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Personnel {
	return predicate.Personnel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Personnel {
	return predicate.Personnel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Personnel {
	return predicate.Personnel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Personnel {
	return predicate.Personnel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Personnel {
	return predicate.Personnel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Personnel {
	return predicate.Personnel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Personnel {
	return predicate.Personnel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Personnel {
	return predicate.Personnel(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldEQ(FieldName, v))
}

// Salary applies equality check predicate on the "salary" field. It's identical to SalaryEQ.
func Salary(v float64) predicate.Personnel {
	return predicate.Personnel(sql.FieldEQ(FieldSalary, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldEQ(FieldDescription, v))
}

// BithDate applies equality check predicate on the "bith_date" field. It's identical to BithDateEQ.
func BithDate(v time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldEQ(FieldBithDate, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldEQ(FieldStartDate, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v bool) predicate.Personnel {
	return predicate.Personnel(sql.FieldEQ(FieldStatus, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Personnel {
	return predicate.Personnel(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Personnel {
	return predicate.Personnel(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldContainsFold(FieldName, v))
}

// SalaryEQ applies the EQ predicate on the "salary" field.
func SalaryEQ(v float64) predicate.Personnel {
	return predicate.Personnel(sql.FieldEQ(FieldSalary, v))
}

// SalaryNEQ applies the NEQ predicate on the "salary" field.
func SalaryNEQ(v float64) predicate.Personnel {
	return predicate.Personnel(sql.FieldNEQ(FieldSalary, v))
}

// SalaryIn applies the In predicate on the "salary" field.
func SalaryIn(vs ...float64) predicate.Personnel {
	return predicate.Personnel(sql.FieldIn(FieldSalary, vs...))
}

// SalaryNotIn applies the NotIn predicate on the "salary" field.
func SalaryNotIn(vs ...float64) predicate.Personnel {
	return predicate.Personnel(sql.FieldNotIn(FieldSalary, vs...))
}

// SalaryGT applies the GT predicate on the "salary" field.
func SalaryGT(v float64) predicate.Personnel {
	return predicate.Personnel(sql.FieldGT(FieldSalary, v))
}

// SalaryGTE applies the GTE predicate on the "salary" field.
func SalaryGTE(v float64) predicate.Personnel {
	return predicate.Personnel(sql.FieldGTE(FieldSalary, v))
}

// SalaryLT applies the LT predicate on the "salary" field.
func SalaryLT(v float64) predicate.Personnel {
	return predicate.Personnel(sql.FieldLT(FieldSalary, v))
}

// SalaryLTE applies the LTE predicate on the "salary" field.
func SalaryLTE(v float64) predicate.Personnel {
	return predicate.Personnel(sql.FieldLTE(FieldSalary, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Personnel {
	return predicate.Personnel(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Personnel {
	return predicate.Personnel(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Personnel {
	return predicate.Personnel(sql.FieldContainsFold(FieldDescription, v))
}

// BithDateEQ applies the EQ predicate on the "bith_date" field.
func BithDateEQ(v time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldEQ(FieldBithDate, v))
}

// BithDateNEQ applies the NEQ predicate on the "bith_date" field.
func BithDateNEQ(v time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldNEQ(FieldBithDate, v))
}

// BithDateIn applies the In predicate on the "bith_date" field.
func BithDateIn(vs ...time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldIn(FieldBithDate, vs...))
}

// BithDateNotIn applies the NotIn predicate on the "bith_date" field.
func BithDateNotIn(vs ...time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldNotIn(FieldBithDate, vs...))
}

// BithDateGT applies the GT predicate on the "bith_date" field.
func BithDateGT(v time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldGT(FieldBithDate, v))
}

// BithDateGTE applies the GTE predicate on the "bith_date" field.
func BithDateGTE(v time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldGTE(FieldBithDate, v))
}

// BithDateLT applies the LT predicate on the "bith_date" field.
func BithDateLT(v time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldLT(FieldBithDate, v))
}

// BithDateLTE applies the LTE predicate on the "bith_date" field.
func BithDateLTE(v time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldLTE(FieldBithDate, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Personnel {
	return predicate.Personnel(sql.FieldLTE(FieldStartDate, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v bool) predicate.Personnel {
	return predicate.Personnel(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v bool) predicate.Personnel {
	return predicate.Personnel(sql.FieldNEQ(FieldStatus, v))
}

// HasPersonnelRelCustomer applies the HasEdge predicate on the "personnel_rel_customer" edge.
func HasPersonnelRelCustomer() predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PersonnelRelCustomerTable, PersonnelRelCustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonnelRelCustomerWith applies the HasEdge predicate on the "personnel_rel_customer" edge with a given conditions (other predicates).
func HasPersonnelRelCustomerWith(preds ...predicate.PersonnelRelCustomer) predicate.Personnel {
	return predicate.Personnel(func(s *sql.Selector) {
		step := newPersonnelRelCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Personnel) predicate.Personnel {
	return predicate.Personnel(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Personnel) predicate.Personnel {
	return predicate.Personnel(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Personnel) predicate.Personnel {
	return predicate.Personnel(sql.NotPredicates(p))
}
