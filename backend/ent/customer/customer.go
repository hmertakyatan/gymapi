// Code generated by ent, DO NOT EDIT.

package customer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the customer type in the database.
	Label = "customer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFullName holds the string denoting the full_name field in the database.
	FieldFullName = "full_name"
	// FieldBirthDate holds the string denoting the birth_date field in the database.
	FieldBirthDate = "birth_date"
	// FieldRegistrationDate holds the string denoting the registration_date field in the database.
	FieldRegistrationDate = "registration_date"
	// FieldCustomerPictureURL holds the string denoting the customer_picture_url field in the database.
	FieldCustomerPictureURL = "customer_picture_url"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeMembership holds the string denoting the membership edge name in mutations.
	EdgeMembership = "membership"
	// EdgePersonnelRelCustomer holds the string denoting the personnel_rel_customer edge name in mutations.
	EdgePersonnelRelCustomer = "personnel_rel_customer"
	// Table holds the table name of the customer in the database.
	Table = "customers"
	// MembershipTable is the table that holds the membership relation/edge.
	MembershipTable = "memberships"
	// MembershipInverseTable is the table name for the Membership entity.
	// It exists in this package in order to avoid circular dependency with the "membership" package.
	MembershipInverseTable = "memberships"
	// MembershipColumn is the table column denoting the membership relation/edge.
	MembershipColumn = "customer_membership"
	// PersonnelRelCustomerTable is the table that holds the personnel_rel_customer relation/edge.
	PersonnelRelCustomerTable = "personnel_rel_customers"
	// PersonnelRelCustomerInverseTable is the table name for the PersonnelRelCustomer entity.
	// It exists in this package in order to avoid circular dependency with the "personnelrelcustomer" package.
	PersonnelRelCustomerInverseTable = "personnel_rel_customers"
	// PersonnelRelCustomerColumn is the table column denoting the personnel_rel_customer relation/edge.
	PersonnelRelCustomerColumn = "customer_personnel_rel_customer"
)

// Columns holds all SQL columns for customer fields.
var Columns = []string{
	FieldID,
	FieldFullName,
	FieldBirthDate,
	FieldRegistrationDate,
	FieldCustomerPictureURL,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRegistrationDate holds the default value on creation for the "registration_date" field.
	DefaultRegistrationDate time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Customer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFullName orders the results by the full_name field.
func ByFullName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFullName, opts...).ToFunc()
}

// ByBirthDate orders the results by the birth_date field.
func ByBirthDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirthDate, opts...).ToFunc()
}

// ByRegistrationDate orders the results by the registration_date field.
func ByRegistrationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistrationDate, opts...).ToFunc()
}

// ByCustomerPictureURL orders the results by the customer_picture_url field.
func ByCustomerPictureURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomerPictureURL, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByMembershipCount orders the results by membership count.
func ByMembershipCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembershipStep(), opts...)
	}
}

// ByMembership orders the results by membership terms.
func ByMembership(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembershipStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPersonnelRelCustomerCount orders the results by personnel_rel_customer count.
func ByPersonnelRelCustomerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPersonnelRelCustomerStep(), opts...)
	}
}

// ByPersonnelRelCustomer orders the results by personnel_rel_customer terms.
func ByPersonnelRelCustomer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonnelRelCustomerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMembershipStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembershipInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MembershipTable, MembershipColumn),
	)
}
func newPersonnelRelCustomerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonnelRelCustomerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PersonnelRelCustomerTable, PersonnelRelCustomerColumn),
	)
}
