// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/hmertakyatan/gymapi/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/hmertakyatan/gymapi/ent/customer"
	"github.com/hmertakyatan/gymapi/ent/membership"
	"github.com/hmertakyatan/gymapi/ent/membership_type"
	"github.com/hmertakyatan/gymapi/ent/payment"
	"github.com/hmertakyatan/gymapi/ent/personnel"
	"github.com/hmertakyatan/gymapi/ent/personnelrelcustomer"
	"github.com/hmertakyatan/gymapi/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// Membership is the client for interacting with the Membership builders.
	Membership *MembershipClient
	// Membership_type is the client for interacting with the Membership_type builders.
	Membership_type *MembershipTypeClient
	// Payment is the client for interacting with the Payment builders.
	Payment *PaymentClient
	// Personnel is the client for interacting with the Personnel builders.
	Personnel *PersonnelClient
	// PersonnelRelCustomer is the client for interacting with the PersonnelRelCustomer builders.
	PersonnelRelCustomer *PersonnelRelCustomerClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Customer = NewCustomerClient(c.config)
	c.Membership = NewMembershipClient(c.config)
	c.Membership_type = NewMembershipTypeClient(c.config)
	c.Payment = NewPaymentClient(c.config)
	c.Personnel = NewPersonnelClient(c.config)
	c.PersonnelRelCustomer = NewPersonnelRelCustomerClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Customer:             NewCustomerClient(cfg),
		Membership:           NewMembershipClient(cfg),
		Membership_type:      NewMembershipTypeClient(cfg),
		Payment:              NewPaymentClient(cfg),
		Personnel:            NewPersonnelClient(cfg),
		PersonnelRelCustomer: NewPersonnelRelCustomerClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		Customer:             NewCustomerClient(cfg),
		Membership:           NewMembershipClient(cfg),
		Membership_type:      NewMembershipTypeClient(cfg),
		Payment:              NewPaymentClient(cfg),
		Personnel:            NewPersonnelClient(cfg),
		PersonnelRelCustomer: NewPersonnelRelCustomerClient(cfg),
		User:                 NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Customer.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Customer, c.Membership, c.Membership_type, c.Payment, c.Personnel,
		c.PersonnelRelCustomer, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Customer, c.Membership, c.Membership_type, c.Payment, c.Personnel,
		c.PersonnelRelCustomer, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CustomerMutation:
		return c.Customer.mutate(ctx, m)
	case *MembershipMutation:
		return c.Membership.mutate(ctx, m)
	case *MembershipTypeMutation:
		return c.Membership_type.mutate(ctx, m)
	case *PaymentMutation:
		return c.Payment.mutate(ctx, m)
	case *PersonnelMutation:
		return c.Personnel.mutate(ctx, m)
	case *PersonnelRelCustomerMutation:
		return c.PersonnelRelCustomer.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CustomerClient is a client for the Customer schema.
type CustomerClient struct {
	config
}

// NewCustomerClient returns a client for the Customer from the given config.
func NewCustomerClient(c config) *CustomerClient {
	return &CustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customer.Hooks(f(g(h())))`.
func (c *CustomerClient) Use(hooks ...Hook) {
	c.hooks.Customer = append(c.hooks.Customer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `customer.Intercept(f(g(h())))`.
func (c *CustomerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Customer = append(c.inters.Customer, interceptors...)
}

// Create returns a builder for creating a Customer entity.
func (c *CustomerClient) Create() *CustomerCreate {
	mutation := newCustomerMutation(c.config, OpCreate)
	return &CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Customer entities.
func (c *CustomerClient) CreateBulk(builders ...*CustomerCreate) *CustomerCreateBulk {
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CustomerClient) MapCreateBulk(slice any, setFunc func(*CustomerCreate, int)) *CustomerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CustomerCreateBulk{err: fmt.Errorf("calling to CustomerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CustomerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Customer.
func (c *CustomerClient) Update() *CustomerUpdate {
	mutation := newCustomerMutation(c.config, OpUpdate)
	return &CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerClient) UpdateOne(cu *Customer) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomer(cu))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerClient) UpdateOneID(id uuid.UUID) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomerID(id))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Customer.
func (c *CustomerClient) Delete() *CustomerDelete {
	mutation := newCustomerMutation(c.config, OpDelete)
	return &CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CustomerClient) DeleteOne(cu *Customer) *CustomerDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CustomerClient) DeleteOneID(id uuid.UUID) *CustomerDeleteOne {
	builder := c.Delete().Where(customer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerDeleteOne{builder}
}

// Query returns a query builder for Customer.
func (c *CustomerClient) Query() *CustomerQuery {
	return &CustomerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCustomer},
		inters: c.Interceptors(),
	}
}

// Get returns a Customer entity by its id.
func (c *CustomerClient) Get(ctx context.Context, id uuid.UUID) (*Customer, error) {
	return c.Query().Where(customer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerClient) GetX(ctx context.Context, id uuid.UUID) *Customer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMembership queries the membership edge of a Customer.
func (c *CustomerClient) QueryMembership(cu *Customer) *MembershipQuery {
	query := (&MembershipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(membership.Table, membership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.MembershipTable, customer.MembershipColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPersonnelRelCustomer queries the personnel_rel_customer edge of a Customer.
func (c *CustomerClient) QueryPersonnelRelCustomer(cu *Customer) *PersonnelRelCustomerQuery {
	query := (&PersonnelRelCustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(personnelrelcustomer.Table, personnelrelcustomer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, customer.PersonnelRelCustomerTable, customer.PersonnelRelCustomerColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerClient) Hooks() []Hook {
	return c.hooks.Customer
}

// Interceptors returns the client interceptors.
func (c *CustomerClient) Interceptors() []Interceptor {
	return c.inters.Customer
}

func (c *CustomerClient) mutate(ctx context.Context, m *CustomerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Customer mutation op: %q", m.Op())
	}
}

// MembershipClient is a client for the Membership schema.
type MembershipClient struct {
	config
}

// NewMembershipClient returns a client for the Membership from the given config.
func NewMembershipClient(c config) *MembershipClient {
	return &MembershipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `membership.Hooks(f(g(h())))`.
func (c *MembershipClient) Use(hooks ...Hook) {
	c.hooks.Membership = append(c.hooks.Membership, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `membership.Intercept(f(g(h())))`.
func (c *MembershipClient) Intercept(interceptors ...Interceptor) {
	c.inters.Membership = append(c.inters.Membership, interceptors...)
}

// Create returns a builder for creating a Membership entity.
func (c *MembershipClient) Create() *MembershipCreate {
	mutation := newMembershipMutation(c.config, OpCreate)
	return &MembershipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Membership entities.
func (c *MembershipClient) CreateBulk(builders ...*MembershipCreate) *MembershipCreateBulk {
	return &MembershipCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MembershipClient) MapCreateBulk(slice any, setFunc func(*MembershipCreate, int)) *MembershipCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MembershipCreateBulk{err: fmt.Errorf("calling to MembershipClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MembershipCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MembershipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Membership.
func (c *MembershipClient) Update() *MembershipUpdate {
	mutation := newMembershipMutation(c.config, OpUpdate)
	return &MembershipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MembershipClient) UpdateOne(m *Membership) *MembershipUpdateOne {
	mutation := newMembershipMutation(c.config, OpUpdateOne, withMembership(m))
	return &MembershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MembershipClient) UpdateOneID(id uuid.UUID) *MembershipUpdateOne {
	mutation := newMembershipMutation(c.config, OpUpdateOne, withMembershipID(id))
	return &MembershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Membership.
func (c *MembershipClient) Delete() *MembershipDelete {
	mutation := newMembershipMutation(c.config, OpDelete)
	return &MembershipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MembershipClient) DeleteOne(m *Membership) *MembershipDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MembershipClient) DeleteOneID(id uuid.UUID) *MembershipDeleteOne {
	builder := c.Delete().Where(membership.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MembershipDeleteOne{builder}
}

// Query returns a query builder for Membership.
func (c *MembershipClient) Query() *MembershipQuery {
	return &MembershipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMembership},
		inters: c.Interceptors(),
	}
}

// Get returns a Membership entity by its id.
func (c *MembershipClient) Get(ctx context.Context, id uuid.UUID) (*Membership, error) {
	return c.Query().Where(membership.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MembershipClient) GetX(ctx context.Context, id uuid.UUID) *Membership {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCustomer queries the customer edge of a Membership.
func (c *MembershipClient) QueryCustomer(m *Membership) *CustomerQuery {
	query := (&CustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(membership.Table, membership.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, membership.CustomerTable, membership.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MembershipClient) Hooks() []Hook {
	return c.hooks.Membership
}

// Interceptors returns the client interceptors.
func (c *MembershipClient) Interceptors() []Interceptor {
	return c.inters.Membership
}

func (c *MembershipClient) mutate(ctx context.Context, m *MembershipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MembershipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MembershipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MembershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MembershipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Membership mutation op: %q", m.Op())
	}
}

// MembershipTypeClient is a client for the Membership_type schema.
type MembershipTypeClient struct {
	config
}

// NewMembershipTypeClient returns a client for the Membership_type from the given config.
func NewMembershipTypeClient(c config) *MembershipTypeClient {
	return &MembershipTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `membership_type.Hooks(f(g(h())))`.
func (c *MembershipTypeClient) Use(hooks ...Hook) {
	c.hooks.Membership_type = append(c.hooks.Membership_type, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `membership_type.Intercept(f(g(h())))`.
func (c *MembershipTypeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Membership_type = append(c.inters.Membership_type, interceptors...)
}

// Create returns a builder for creating a Membership_type entity.
func (c *MembershipTypeClient) Create() *MembershipTypeCreate {
	mutation := newMembershipTypeMutation(c.config, OpCreate)
	return &MembershipTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Membership_type entities.
func (c *MembershipTypeClient) CreateBulk(builders ...*MembershipTypeCreate) *MembershipTypeCreateBulk {
	return &MembershipTypeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MembershipTypeClient) MapCreateBulk(slice any, setFunc func(*MembershipTypeCreate, int)) *MembershipTypeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MembershipTypeCreateBulk{err: fmt.Errorf("calling to MembershipTypeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MembershipTypeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MembershipTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Membership_type.
func (c *MembershipTypeClient) Update() *MembershipTypeUpdate {
	mutation := newMembershipTypeMutation(c.config, OpUpdate)
	return &MembershipTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MembershipTypeClient) UpdateOne(mt *Membership_type) *MembershipTypeUpdateOne {
	mutation := newMembershipTypeMutation(c.config, OpUpdateOne, withMembership_type(mt))
	return &MembershipTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MembershipTypeClient) UpdateOneID(id uuid.UUID) *MembershipTypeUpdateOne {
	mutation := newMembershipTypeMutation(c.config, OpUpdateOne, withMembership_typeID(id))
	return &MembershipTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Membership_type.
func (c *MembershipTypeClient) Delete() *MembershipTypeDelete {
	mutation := newMembershipTypeMutation(c.config, OpDelete)
	return &MembershipTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MembershipTypeClient) DeleteOne(mt *Membership_type) *MembershipTypeDeleteOne {
	return c.DeleteOneID(mt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MembershipTypeClient) DeleteOneID(id uuid.UUID) *MembershipTypeDeleteOne {
	builder := c.Delete().Where(membership_type.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MembershipTypeDeleteOne{builder}
}

// Query returns a query builder for Membership_type.
func (c *MembershipTypeClient) Query() *MembershipTypeQuery {
	return &MembershipTypeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMembershipType},
		inters: c.Interceptors(),
	}
}

// Get returns a Membership_type entity by its id.
func (c *MembershipTypeClient) Get(ctx context.Context, id uuid.UUID) (*Membership_type, error) {
	return c.Query().Where(membership_type.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MembershipTypeClient) GetX(ctx context.Context, id uuid.UUID) *Membership_type {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MembershipTypeClient) Hooks() []Hook {
	return c.hooks.Membership_type
}

// Interceptors returns the client interceptors.
func (c *MembershipTypeClient) Interceptors() []Interceptor {
	return c.inters.Membership_type
}

func (c *MembershipTypeClient) mutate(ctx context.Context, m *MembershipTypeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MembershipTypeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MembershipTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MembershipTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MembershipTypeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Membership_type mutation op: %q", m.Op())
	}
}

// PaymentClient is a client for the Payment schema.
type PaymentClient struct {
	config
}

// NewPaymentClient returns a client for the Payment from the given config.
func NewPaymentClient(c config) *PaymentClient {
	return &PaymentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `payment.Hooks(f(g(h())))`.
func (c *PaymentClient) Use(hooks ...Hook) {
	c.hooks.Payment = append(c.hooks.Payment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `payment.Intercept(f(g(h())))`.
func (c *PaymentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Payment = append(c.inters.Payment, interceptors...)
}

// Create returns a builder for creating a Payment entity.
func (c *PaymentClient) Create() *PaymentCreate {
	mutation := newPaymentMutation(c.config, OpCreate)
	return &PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Payment entities.
func (c *PaymentClient) CreateBulk(builders ...*PaymentCreate) *PaymentCreateBulk {
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PaymentClient) MapCreateBulk(slice any, setFunc func(*PaymentCreate, int)) *PaymentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PaymentCreateBulk{err: fmt.Errorf("calling to PaymentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PaymentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PaymentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Payment.
func (c *PaymentClient) Update() *PaymentUpdate {
	mutation := newPaymentMutation(c.config, OpUpdate)
	return &PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PaymentClient) UpdateOne(pa *Payment) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPayment(pa))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PaymentClient) UpdateOneID(id uuid.UUID) *PaymentUpdateOne {
	mutation := newPaymentMutation(c.config, OpUpdateOne, withPaymentID(id))
	return &PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Payment.
func (c *PaymentClient) Delete() *PaymentDelete {
	mutation := newPaymentMutation(c.config, OpDelete)
	return &PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PaymentClient) DeleteOne(pa *Payment) *PaymentDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PaymentClient) DeleteOneID(id uuid.UUID) *PaymentDeleteOne {
	builder := c.Delete().Where(payment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PaymentDeleteOne{builder}
}

// Query returns a query builder for Payment.
func (c *PaymentClient) Query() *PaymentQuery {
	return &PaymentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePayment},
		inters: c.Interceptors(),
	}
}

// Get returns a Payment entity by its id.
func (c *PaymentClient) Get(ctx context.Context, id uuid.UUID) (*Payment, error) {
	return c.Query().Where(payment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PaymentClient) GetX(ctx context.Context, id uuid.UUID) *Payment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PaymentClient) Hooks() []Hook {
	return c.hooks.Payment
}

// Interceptors returns the client interceptors.
func (c *PaymentClient) Interceptors() []Interceptor {
	return c.inters.Payment
}

func (c *PaymentClient) mutate(ctx context.Context, m *PaymentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PaymentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PaymentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PaymentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PaymentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Payment mutation op: %q", m.Op())
	}
}

// PersonnelClient is a client for the Personnel schema.
type PersonnelClient struct {
	config
}

// NewPersonnelClient returns a client for the Personnel from the given config.
func NewPersonnelClient(c config) *PersonnelClient {
	return &PersonnelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `personnel.Hooks(f(g(h())))`.
func (c *PersonnelClient) Use(hooks ...Hook) {
	c.hooks.Personnel = append(c.hooks.Personnel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `personnel.Intercept(f(g(h())))`.
func (c *PersonnelClient) Intercept(interceptors ...Interceptor) {
	c.inters.Personnel = append(c.inters.Personnel, interceptors...)
}

// Create returns a builder for creating a Personnel entity.
func (c *PersonnelClient) Create() *PersonnelCreate {
	mutation := newPersonnelMutation(c.config, OpCreate)
	return &PersonnelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Personnel entities.
func (c *PersonnelClient) CreateBulk(builders ...*PersonnelCreate) *PersonnelCreateBulk {
	return &PersonnelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PersonnelClient) MapCreateBulk(slice any, setFunc func(*PersonnelCreate, int)) *PersonnelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PersonnelCreateBulk{err: fmt.Errorf("calling to PersonnelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PersonnelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PersonnelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Personnel.
func (c *PersonnelClient) Update() *PersonnelUpdate {
	mutation := newPersonnelMutation(c.config, OpUpdate)
	return &PersonnelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonnelClient) UpdateOne(pe *Personnel) *PersonnelUpdateOne {
	mutation := newPersonnelMutation(c.config, OpUpdateOne, withPersonnel(pe))
	return &PersonnelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonnelClient) UpdateOneID(id uuid.UUID) *PersonnelUpdateOne {
	mutation := newPersonnelMutation(c.config, OpUpdateOne, withPersonnelID(id))
	return &PersonnelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Personnel.
func (c *PersonnelClient) Delete() *PersonnelDelete {
	mutation := newPersonnelMutation(c.config, OpDelete)
	return &PersonnelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PersonnelClient) DeleteOne(pe *Personnel) *PersonnelDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PersonnelClient) DeleteOneID(id uuid.UUID) *PersonnelDeleteOne {
	builder := c.Delete().Where(personnel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonnelDeleteOne{builder}
}

// Query returns a query builder for Personnel.
func (c *PersonnelClient) Query() *PersonnelQuery {
	return &PersonnelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePersonnel},
		inters: c.Interceptors(),
	}
}

// Get returns a Personnel entity by its id.
func (c *PersonnelClient) Get(ctx context.Context, id uuid.UUID) (*Personnel, error) {
	return c.Query().Where(personnel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonnelClient) GetX(ctx context.Context, id uuid.UUID) *Personnel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPersonnelRelCustomer queries the personnel_rel_customer edge of a Personnel.
func (c *PersonnelClient) QueryPersonnelRelCustomer(pe *Personnel) *PersonnelRelCustomerQuery {
	query := (&PersonnelRelCustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personnel.Table, personnel.FieldID, id),
			sqlgraph.To(personnelrelcustomer.Table, personnelrelcustomer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, personnel.PersonnelRelCustomerTable, personnel.PersonnelRelCustomerColumn),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonnelClient) Hooks() []Hook {
	return c.hooks.Personnel
}

// Interceptors returns the client interceptors.
func (c *PersonnelClient) Interceptors() []Interceptor {
	return c.inters.Personnel
}

func (c *PersonnelClient) mutate(ctx context.Context, m *PersonnelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PersonnelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PersonnelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PersonnelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PersonnelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Personnel mutation op: %q", m.Op())
	}
}

// PersonnelRelCustomerClient is a client for the PersonnelRelCustomer schema.
type PersonnelRelCustomerClient struct {
	config
}

// NewPersonnelRelCustomerClient returns a client for the PersonnelRelCustomer from the given config.
func NewPersonnelRelCustomerClient(c config) *PersonnelRelCustomerClient {
	return &PersonnelRelCustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `personnelrelcustomer.Hooks(f(g(h())))`.
func (c *PersonnelRelCustomerClient) Use(hooks ...Hook) {
	c.hooks.PersonnelRelCustomer = append(c.hooks.PersonnelRelCustomer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `personnelrelcustomer.Intercept(f(g(h())))`.
func (c *PersonnelRelCustomerClient) Intercept(interceptors ...Interceptor) {
	c.inters.PersonnelRelCustomer = append(c.inters.PersonnelRelCustomer, interceptors...)
}

// Create returns a builder for creating a PersonnelRelCustomer entity.
func (c *PersonnelRelCustomerClient) Create() *PersonnelRelCustomerCreate {
	mutation := newPersonnelRelCustomerMutation(c.config, OpCreate)
	return &PersonnelRelCustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PersonnelRelCustomer entities.
func (c *PersonnelRelCustomerClient) CreateBulk(builders ...*PersonnelRelCustomerCreate) *PersonnelRelCustomerCreateBulk {
	return &PersonnelRelCustomerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PersonnelRelCustomerClient) MapCreateBulk(slice any, setFunc func(*PersonnelRelCustomerCreate, int)) *PersonnelRelCustomerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PersonnelRelCustomerCreateBulk{err: fmt.Errorf("calling to PersonnelRelCustomerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PersonnelRelCustomerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PersonnelRelCustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PersonnelRelCustomer.
func (c *PersonnelRelCustomerClient) Update() *PersonnelRelCustomerUpdate {
	mutation := newPersonnelRelCustomerMutation(c.config, OpUpdate)
	return &PersonnelRelCustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonnelRelCustomerClient) UpdateOne(prc *PersonnelRelCustomer) *PersonnelRelCustomerUpdateOne {
	mutation := newPersonnelRelCustomerMutation(c.config, OpUpdateOne, withPersonnelRelCustomer(prc))
	return &PersonnelRelCustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonnelRelCustomerClient) UpdateOneID(id uuid.UUID) *PersonnelRelCustomerUpdateOne {
	mutation := newPersonnelRelCustomerMutation(c.config, OpUpdateOne, withPersonnelRelCustomerID(id))
	return &PersonnelRelCustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PersonnelRelCustomer.
func (c *PersonnelRelCustomerClient) Delete() *PersonnelRelCustomerDelete {
	mutation := newPersonnelRelCustomerMutation(c.config, OpDelete)
	return &PersonnelRelCustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PersonnelRelCustomerClient) DeleteOne(prc *PersonnelRelCustomer) *PersonnelRelCustomerDeleteOne {
	return c.DeleteOneID(prc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PersonnelRelCustomerClient) DeleteOneID(id uuid.UUID) *PersonnelRelCustomerDeleteOne {
	builder := c.Delete().Where(personnelrelcustomer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonnelRelCustomerDeleteOne{builder}
}

// Query returns a query builder for PersonnelRelCustomer.
func (c *PersonnelRelCustomerClient) Query() *PersonnelRelCustomerQuery {
	return &PersonnelRelCustomerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePersonnelRelCustomer},
		inters: c.Interceptors(),
	}
}

// Get returns a PersonnelRelCustomer entity by its id.
func (c *PersonnelRelCustomerClient) Get(ctx context.Context, id uuid.UUID) (*PersonnelRelCustomer, error) {
	return c.Query().Where(personnelrelcustomer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonnelRelCustomerClient) GetX(ctx context.Context, id uuid.UUID) *PersonnelRelCustomer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPersonnel queries the personnel edge of a PersonnelRelCustomer.
func (c *PersonnelRelCustomerClient) QueryPersonnel(prc *PersonnelRelCustomer) *PersonnelQuery {
	query := (&PersonnelClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := prc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personnelrelcustomer.Table, personnelrelcustomer.FieldID, id),
			sqlgraph.To(personnel.Table, personnel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, personnelrelcustomer.PersonnelTable, personnelrelcustomer.PersonnelColumn),
		)
		fromV = sqlgraph.Neighbors(prc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCustomer queries the customer edge of a PersonnelRelCustomer.
func (c *PersonnelRelCustomerClient) QueryCustomer(prc *PersonnelRelCustomer) *CustomerQuery {
	query := (&CustomerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := prc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personnelrelcustomer.Table, personnelrelcustomer.FieldID, id),
			sqlgraph.To(customer.Table, customer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, personnelrelcustomer.CustomerTable, personnelrelcustomer.CustomerColumn),
		)
		fromV = sqlgraph.Neighbors(prc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonnelRelCustomerClient) Hooks() []Hook {
	return c.hooks.PersonnelRelCustomer
}

// Interceptors returns the client interceptors.
func (c *PersonnelRelCustomerClient) Interceptors() []Interceptor {
	return c.inters.PersonnelRelCustomer
}

func (c *PersonnelRelCustomerClient) mutate(ctx context.Context, m *PersonnelRelCustomerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PersonnelRelCustomerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PersonnelRelCustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PersonnelRelCustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PersonnelRelCustomerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PersonnelRelCustomer mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Customer, Membership, Membership_type, Payment, Personnel, PersonnelRelCustomer,
		User []ent.Hook
	}
	inters struct {
		Customer, Membership, Membership_type, Payment, Personnel, PersonnelRelCustomer,
		User []ent.Interceptor
	}
)
