// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hmertakyatan/gymapi/ent/personnel"
	"github.com/hmertakyatan/gymapi/ent/personnelrelcustomer"
)

// PersonnelCreate is the builder for creating a Personnel entity.
type PersonnelCreate struct {
	config
	mutation *PersonnelMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *PersonnelCreate) SetName(s string) *PersonnelCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetSalary sets the "salary" field.
func (pc *PersonnelCreate) SetSalary(f float64) *PersonnelCreate {
	pc.mutation.SetSalary(f)
	return pc
}

// SetDescription sets the "description" field.
func (pc *PersonnelCreate) SetDescription(s string) *PersonnelCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetBithDate sets the "bith_date" field.
func (pc *PersonnelCreate) SetBithDate(t time.Time) *PersonnelCreate {
	pc.mutation.SetBithDate(t)
	return pc
}

// SetStartDate sets the "start_date" field.
func (pc *PersonnelCreate) SetStartDate(t time.Time) *PersonnelCreate {
	pc.mutation.SetStartDate(t)
	return pc
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (pc *PersonnelCreate) SetNillableStartDate(t *time.Time) *PersonnelCreate {
	if t != nil {
		pc.SetStartDate(*t)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PersonnelCreate) SetStatus(b bool) *PersonnelCreate {
	pc.mutation.SetStatus(b)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PersonnelCreate) SetNillableStatus(b *bool) *PersonnelCreate {
	if b != nil {
		pc.SetStatus(*b)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PersonnelCreate) SetID(u uuid.UUID) *PersonnelCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PersonnelCreate) SetNillableID(u *uuid.UUID) *PersonnelCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// AddPersonnelRelCustomerIDs adds the "personnel_rel_customer" edge to the PersonnelRelCustomer entity by IDs.
func (pc *PersonnelCreate) AddPersonnelRelCustomerIDs(ids ...uuid.UUID) *PersonnelCreate {
	pc.mutation.AddPersonnelRelCustomerIDs(ids...)
	return pc
}

// AddPersonnelRelCustomer adds the "personnel_rel_customer" edges to the PersonnelRelCustomer entity.
func (pc *PersonnelCreate) AddPersonnelRelCustomer(p ...*PersonnelRelCustomer) *PersonnelCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPersonnelRelCustomerIDs(ids...)
}

// Mutation returns the PersonnelMutation object of the builder.
func (pc *PersonnelCreate) Mutation() *PersonnelMutation {
	return pc.mutation
}

// Save creates the Personnel in the database.
func (pc *PersonnelCreate) Save(ctx context.Context) (*Personnel, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PersonnelCreate) SaveX(ctx context.Context) *Personnel {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PersonnelCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PersonnelCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PersonnelCreate) defaults() {
	if _, ok := pc.mutation.StartDate(); !ok {
		v := personnel.DefaultStartDate
		pc.mutation.SetStartDate(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := personnel.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := personnel.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PersonnelCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Personnel.name"`)}
	}
	if _, ok := pc.mutation.Salary(); !ok {
		return &ValidationError{Name: "salary", err: errors.New(`ent: missing required field "Personnel.salary"`)}
	}
	if _, ok := pc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Personnel.description"`)}
	}
	if _, ok := pc.mutation.BithDate(); !ok {
		return &ValidationError{Name: "bith_date", err: errors.New(`ent: missing required field "Personnel.bith_date"`)}
	}
	if _, ok := pc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Personnel.start_date"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Personnel.status"`)}
	}
	return nil
}

func (pc *PersonnelCreate) sqlSave(ctx context.Context) (*Personnel, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PersonnelCreate) createSpec() (*Personnel, *sqlgraph.CreateSpec) {
	var (
		_node = &Personnel{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(personnel.Table, sqlgraph.NewFieldSpec(personnel.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(personnel.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Salary(); ok {
		_spec.SetField(personnel.FieldSalary, field.TypeFloat64, value)
		_node.Salary = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(personnel.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.BithDate(); ok {
		_spec.SetField(personnel.FieldBithDate, field.TypeTime, value)
		_node.BithDate = value
	}
	if value, ok := pc.mutation.StartDate(); ok {
		_spec.SetField(personnel.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(personnel.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	if nodes := pc.mutation.PersonnelRelCustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   personnel.PersonnelRelCustomerTable,
			Columns: []string{personnel.PersonnelRelCustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PersonnelCreateBulk is the builder for creating many Personnel entities in bulk.
type PersonnelCreateBulk struct {
	config
	err      error
	builders []*PersonnelCreate
}

// Save creates the Personnel entities in the database.
func (pcb *PersonnelCreateBulk) Save(ctx context.Context) ([]*Personnel, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Personnel, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonnelMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PersonnelCreateBulk) SaveX(ctx context.Context) []*Personnel {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PersonnelCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PersonnelCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
