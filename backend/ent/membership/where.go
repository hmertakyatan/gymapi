// Code generated by ent, DO NOT EDIT.

package membership

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/hmertakyatan/gymapi/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldID, id))
}

// OperationDate applies equality check predicate on the "operation_date" field. It's identical to OperationDateEQ.
func OperationDate(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldOperationDate, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldEndDate, v))
}

// AmountPaid applies equality check predicate on the "amount_paid" field. It's identical to AmountPaidEQ.
func AmountPaid(v float64) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldAmountPaid, v))
}

// AmountRemaining applies equality check predicate on the "amount_remaining" field. It's identical to AmountRemainingEQ.
func AmountRemaining(v float64) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldAmountRemaining, v))
}

// OperationDateEQ applies the EQ predicate on the "operation_date" field.
func OperationDateEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldOperationDate, v))
}

// OperationDateNEQ applies the NEQ predicate on the "operation_date" field.
func OperationDateNEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldOperationDate, v))
}

// OperationDateIn applies the In predicate on the "operation_date" field.
func OperationDateIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldOperationDate, vs...))
}

// OperationDateNotIn applies the NotIn predicate on the "operation_date" field.
func OperationDateNotIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldOperationDate, vs...))
}

// OperationDateGT applies the GT predicate on the "operation_date" field.
func OperationDateGT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldOperationDate, v))
}

// OperationDateGTE applies the GTE predicate on the "operation_date" field.
func OperationDateGTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldOperationDate, v))
}

// OperationDateLT applies the LT predicate on the "operation_date" field.
func OperationDateLT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldOperationDate, v))
}

// OperationDateLTE applies the LTE predicate on the "operation_date" field.
func OperationDateLTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldOperationDate, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldEndDate, v))
}

// AmountPaidEQ applies the EQ predicate on the "amount_paid" field.
func AmountPaidEQ(v float64) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldAmountPaid, v))
}

// AmountPaidNEQ applies the NEQ predicate on the "amount_paid" field.
func AmountPaidNEQ(v float64) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldAmountPaid, v))
}

// AmountPaidIn applies the In predicate on the "amount_paid" field.
func AmountPaidIn(vs ...float64) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldAmountPaid, vs...))
}

// AmountPaidNotIn applies the NotIn predicate on the "amount_paid" field.
func AmountPaidNotIn(vs ...float64) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldAmountPaid, vs...))
}

// AmountPaidGT applies the GT predicate on the "amount_paid" field.
func AmountPaidGT(v float64) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldAmountPaid, v))
}

// AmountPaidGTE applies the GTE predicate on the "amount_paid" field.
func AmountPaidGTE(v float64) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldAmountPaid, v))
}

// AmountPaidLT applies the LT predicate on the "amount_paid" field.
func AmountPaidLT(v float64) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldAmountPaid, v))
}

// AmountPaidLTE applies the LTE predicate on the "amount_paid" field.
func AmountPaidLTE(v float64) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldAmountPaid, v))
}

// AmountPaidIsNil applies the IsNil predicate on the "amount_paid" field.
func AmountPaidIsNil() predicate.Membership {
	return predicate.Membership(sql.FieldIsNull(FieldAmountPaid))
}

// AmountPaidNotNil applies the NotNil predicate on the "amount_paid" field.
func AmountPaidNotNil() predicate.Membership {
	return predicate.Membership(sql.FieldNotNull(FieldAmountPaid))
}

// AmountRemainingEQ applies the EQ predicate on the "amount_remaining" field.
func AmountRemainingEQ(v float64) predicate.Membership {
	return predicate.Membership(sql.FieldEQ(FieldAmountRemaining, v))
}

// AmountRemainingNEQ applies the NEQ predicate on the "amount_remaining" field.
func AmountRemainingNEQ(v float64) predicate.Membership {
	return predicate.Membership(sql.FieldNEQ(FieldAmountRemaining, v))
}

// AmountRemainingIn applies the In predicate on the "amount_remaining" field.
func AmountRemainingIn(vs ...float64) predicate.Membership {
	return predicate.Membership(sql.FieldIn(FieldAmountRemaining, vs...))
}

// AmountRemainingNotIn applies the NotIn predicate on the "amount_remaining" field.
func AmountRemainingNotIn(vs ...float64) predicate.Membership {
	return predicate.Membership(sql.FieldNotIn(FieldAmountRemaining, vs...))
}

// AmountRemainingGT applies the GT predicate on the "amount_remaining" field.
func AmountRemainingGT(v float64) predicate.Membership {
	return predicate.Membership(sql.FieldGT(FieldAmountRemaining, v))
}

// AmountRemainingGTE applies the GTE predicate on the "amount_remaining" field.
func AmountRemainingGTE(v float64) predicate.Membership {
	return predicate.Membership(sql.FieldGTE(FieldAmountRemaining, v))
}

// AmountRemainingLT applies the LT predicate on the "amount_remaining" field.
func AmountRemainingLT(v float64) predicate.Membership {
	return predicate.Membership(sql.FieldLT(FieldAmountRemaining, v))
}

// AmountRemainingLTE applies the LTE predicate on the "amount_remaining" field.
func AmountRemainingLTE(v float64) predicate.Membership {
	return predicate.Membership(sql.FieldLTE(FieldAmountRemaining, v))
}

// HasCustomer applies the HasEdge predicate on the "customer" edge.
func HasCustomer() predicate.Membership {
	return predicate.Membership(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CustomerTable, CustomerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomerWith applies the HasEdge predicate on the "customer" edge with a given conditions (other predicates).
func HasCustomerWith(preds ...predicate.Customer) predicate.Membership {
	return predicate.Membership(func(s *sql.Selector) {
		step := newCustomerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Membership) predicate.Membership {
	return predicate.Membership(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Membership) predicate.Membership {
	return predicate.Membership(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Membership) predicate.Membership {
	return predicate.Membership(sql.NotPredicates(p))
}
