// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/hmertakyatan/gymapi/ent/customer"
	"github.com/hmertakyatan/gymapi/ent/personnel"
	"github.com/hmertakyatan/gymapi/ent/personnelrelcustomer"
)

// PersonnelRelCustomer is the model entity for the PersonnelRelCustomer schema.
type PersonnelRelCustomer struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Price holds the value of the "price" field.
	Price float64 `json:"price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PersonnelRelCustomerQuery when eager-loading is set.
	Edges                            PersonnelRelCustomerEdges `json:"edges"`
	customer_personnel_rel_customer  *uuid.UUID
	personnel_personnel_rel_customer *uuid.UUID
	selectValues                     sql.SelectValues
}

// PersonnelRelCustomerEdges holds the relations/edges for other nodes in the graph.
type PersonnelRelCustomerEdges struct {
	// Personnel holds the value of the personnel edge.
	Personnel *Personnel `json:"personnel,omitempty"`
	// Customer holds the value of the customer edge.
	Customer *Customer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PersonnelOrErr returns the Personnel value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PersonnelRelCustomerEdges) PersonnelOrErr() (*Personnel, error) {
	if e.loadedTypes[0] {
		if e.Personnel == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: personnel.Label}
		}
		return e.Personnel, nil
	}
	return nil, &NotLoadedError{edge: "personnel"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PersonnelRelCustomerEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[1] {
		if e.Customer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PersonnelRelCustomer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case personnelrelcustomer.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case personnelrelcustomer.FieldDescription:
			values[i] = new(sql.NullString)
		case personnelrelcustomer.FieldID:
			values[i] = new(uuid.UUID)
		case personnelrelcustomer.ForeignKeys[0]: // customer_personnel_rel_customer
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case personnelrelcustomer.ForeignKeys[1]: // personnel_personnel_rel_customer
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PersonnelRelCustomer fields.
func (prc *PersonnelRelCustomer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case personnelrelcustomer.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				prc.ID = *value
			}
		case personnelrelcustomer.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				prc.Description = value.String
			}
		case personnelrelcustomer.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				prc.Price = value.Float64
			}
		case personnelrelcustomer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field customer_personnel_rel_customer", values[i])
			} else if value.Valid {
				prc.customer_personnel_rel_customer = new(uuid.UUID)
				*prc.customer_personnel_rel_customer = *value.S.(*uuid.UUID)
			}
		case personnelrelcustomer.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field personnel_personnel_rel_customer", values[i])
			} else if value.Valid {
				prc.personnel_personnel_rel_customer = new(uuid.UUID)
				*prc.personnel_personnel_rel_customer = *value.S.(*uuid.UUID)
			}
		default:
			prc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PersonnelRelCustomer.
// This includes values selected through modifiers, order, etc.
func (prc *PersonnelRelCustomer) Value(name string) (ent.Value, error) {
	return prc.selectValues.Get(name)
}

// QueryPersonnel queries the "personnel" edge of the PersonnelRelCustomer entity.
func (prc *PersonnelRelCustomer) QueryPersonnel() *PersonnelQuery {
	return NewPersonnelRelCustomerClient(prc.config).QueryPersonnel(prc)
}

// QueryCustomer queries the "customer" edge of the PersonnelRelCustomer entity.
func (prc *PersonnelRelCustomer) QueryCustomer() *CustomerQuery {
	return NewPersonnelRelCustomerClient(prc.config).QueryCustomer(prc)
}

// Update returns a builder for updating this PersonnelRelCustomer.
// Note that you need to call PersonnelRelCustomer.Unwrap() before calling this method if this PersonnelRelCustomer
// was returned from a transaction, and the transaction was committed or rolled back.
func (prc *PersonnelRelCustomer) Update() *PersonnelRelCustomerUpdateOne {
	return NewPersonnelRelCustomerClient(prc.config).UpdateOne(prc)
}

// Unwrap unwraps the PersonnelRelCustomer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (prc *PersonnelRelCustomer) Unwrap() *PersonnelRelCustomer {
	_tx, ok := prc.config.driver.(*txDriver)
	if !ok {
		panic("ent: PersonnelRelCustomer is not a transactional entity")
	}
	prc.config.driver = _tx.drv
	return prc
}

// String implements the fmt.Stringer.
func (prc *PersonnelRelCustomer) String() string {
	var builder strings.Builder
	builder.WriteString("PersonnelRelCustomer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", prc.ID))
	builder.WriteString("description=")
	builder.WriteString(prc.Description)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", prc.Price))
	builder.WriteByte(')')
	return builder.String()
}

// PersonnelRelCustomers is a parsable slice of PersonnelRelCustomer.
type PersonnelRelCustomers []*PersonnelRelCustomer
