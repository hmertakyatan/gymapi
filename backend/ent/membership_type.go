// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/hmertakyatan/gymapi/ent/membership_type"
)

// Membership_type is the model entity for the Membership_type schema.
type Membership_type struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// MembershipMonth holds the value of the "membership_month" field.
	MembershipMonth uint8 `json:"membership_month,omitempty"`
	// Price holds the value of the "price" field.
	Price        float64 `json:"price,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Membership_type) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case membership_type.FieldPrice:
			values[i] = new(sql.NullFloat64)
		case membership_type.FieldMembershipMonth:
			values[i] = new(sql.NullInt64)
		case membership_type.FieldName, membership_type.FieldDescription:
			values[i] = new(sql.NullString)
		case membership_type.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Membership_type fields.
func (mt *Membership_type) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case membership_type.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				mt.ID = *value
			}
		case membership_type.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				mt.Name = value.String
			}
		case membership_type.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				mt.Description = value.String
			}
		case membership_type.FieldMembershipMonth:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field membership_month", values[i])
			} else if value.Valid {
				mt.MembershipMonth = uint8(value.Int64)
			}
		case membership_type.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				mt.Price = value.Float64
			}
		default:
			mt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Membership_type.
// This includes values selected through modifiers, order, etc.
func (mt *Membership_type) Value(name string) (ent.Value, error) {
	return mt.selectValues.Get(name)
}

// Update returns a builder for updating this Membership_type.
// Note that you need to call Membership_type.Unwrap() before calling this method if this Membership_type
// was returned from a transaction, and the transaction was committed or rolled back.
func (mt *Membership_type) Update() *MembershipTypeUpdateOne {
	return NewMembershipTypeClient(mt.config).UpdateOne(mt)
}

// Unwrap unwraps the Membership_type entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mt *Membership_type) Unwrap() *Membership_type {
	_tx, ok := mt.config.driver.(*txDriver)
	if !ok {
		panic("ent: Membership_type is not a transactional entity")
	}
	mt.config.driver = _tx.drv
	return mt
}

// String implements the fmt.Stringer.
func (mt *Membership_type) String() string {
	var builder strings.Builder
	builder.WriteString("Membership_type(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mt.ID))
	builder.WriteString("name=")
	builder.WriteString(mt.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(mt.Description)
	builder.WriteString(", ")
	builder.WriteString("membership_month=")
	builder.WriteString(fmt.Sprintf("%v", mt.MembershipMonth))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", mt.Price))
	builder.WriteByte(')')
	return builder.String()
}

// Membership_types is a parsable slice of Membership_type.
type Membership_types []*Membership_type
