// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hmertakyatan/gymapi/ent/customer"
	"github.com/hmertakyatan/gymapi/ent/personnel"
	"github.com/hmertakyatan/gymapi/ent/personnelrelcustomer"
)

// PersonnelRelCustomerCreate is the builder for creating a PersonnelRelCustomer entity.
type PersonnelRelCustomerCreate struct {
	config
	mutation *PersonnelRelCustomerMutation
	hooks    []Hook
}

// SetDescription sets the "description" field.
func (prcc *PersonnelRelCustomerCreate) SetDescription(s string) *PersonnelRelCustomerCreate {
	prcc.mutation.SetDescription(s)
	return prcc
}

// SetPrice sets the "price" field.
func (prcc *PersonnelRelCustomerCreate) SetPrice(f float64) *PersonnelRelCustomerCreate {
	prcc.mutation.SetPrice(f)
	return prcc
}

// SetID sets the "id" field.
func (prcc *PersonnelRelCustomerCreate) SetID(u uuid.UUID) *PersonnelRelCustomerCreate {
	prcc.mutation.SetID(u)
	return prcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (prcc *PersonnelRelCustomerCreate) SetNillableID(u *uuid.UUID) *PersonnelRelCustomerCreate {
	if u != nil {
		prcc.SetID(*u)
	}
	return prcc
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by ID.
func (prcc *PersonnelRelCustomerCreate) SetPersonnelID(id uuid.UUID) *PersonnelRelCustomerCreate {
	prcc.mutation.SetPersonnelID(id)
	return prcc
}

// SetPersonnel sets the "personnel" edge to the Personnel entity.
func (prcc *PersonnelRelCustomerCreate) SetPersonnel(p *Personnel) *PersonnelRelCustomerCreate {
	return prcc.SetPersonnelID(p.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (prcc *PersonnelRelCustomerCreate) SetCustomerID(id uuid.UUID) *PersonnelRelCustomerCreate {
	prcc.mutation.SetCustomerID(id)
	return prcc
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (prcc *PersonnelRelCustomerCreate) SetCustomer(c *Customer) *PersonnelRelCustomerCreate {
	return prcc.SetCustomerID(c.ID)
}

// Mutation returns the PersonnelRelCustomerMutation object of the builder.
func (prcc *PersonnelRelCustomerCreate) Mutation() *PersonnelRelCustomerMutation {
	return prcc.mutation
}

// Save creates the PersonnelRelCustomer in the database.
func (prcc *PersonnelRelCustomerCreate) Save(ctx context.Context) (*PersonnelRelCustomer, error) {
	prcc.defaults()
	return withHooks(ctx, prcc.sqlSave, prcc.mutation, prcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prcc *PersonnelRelCustomerCreate) SaveX(ctx context.Context) *PersonnelRelCustomer {
	v, err := prcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcc *PersonnelRelCustomerCreate) Exec(ctx context.Context) error {
	_, err := prcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcc *PersonnelRelCustomerCreate) ExecX(ctx context.Context) {
	if err := prcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prcc *PersonnelRelCustomerCreate) defaults() {
	if _, ok := prcc.mutation.ID(); !ok {
		v := personnelrelcustomer.DefaultID()
		prcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prcc *PersonnelRelCustomerCreate) check() error {
	if _, ok := prcc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "PersonnelRelCustomer.description"`)}
	}
	if _, ok := prcc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "PersonnelRelCustomer.price"`)}
	}
	if _, ok := prcc.mutation.PersonnelID(); !ok {
		return &ValidationError{Name: "personnel", err: errors.New(`ent: missing required edge "PersonnelRelCustomer.personnel"`)}
	}
	if _, ok := prcc.mutation.CustomerID(); !ok {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "PersonnelRelCustomer.customer"`)}
	}
	return nil
}

func (prcc *PersonnelRelCustomerCreate) sqlSave(ctx context.Context) (*PersonnelRelCustomer, error) {
	if err := prcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	prcc.mutation.id = &_node.ID
	prcc.mutation.done = true
	return _node, nil
}

func (prcc *PersonnelRelCustomerCreate) createSpec() (*PersonnelRelCustomer, *sqlgraph.CreateSpec) {
	var (
		_node = &PersonnelRelCustomer{config: prcc.config}
		_spec = sqlgraph.NewCreateSpec(personnelrelcustomer.Table, sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID))
	)
	if id, ok := prcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := prcc.mutation.Description(); ok {
		_spec.SetField(personnelrelcustomer.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := prcc.mutation.Price(); ok {
		_spec.SetField(personnelrelcustomer.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if nodes := prcc.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personnelrelcustomer.PersonnelTable,
			Columns: []string{personnelrelcustomer.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.personnel_personnel_rel_customer = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prcc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personnelrelcustomer.CustomerTable,
			Columns: []string{personnelrelcustomer.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.customer_personnel_rel_customer = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PersonnelRelCustomerCreateBulk is the builder for creating many PersonnelRelCustomer entities in bulk.
type PersonnelRelCustomerCreateBulk struct {
	config
	err      error
	builders []*PersonnelRelCustomerCreate
}

// Save creates the PersonnelRelCustomer entities in the database.
func (prccb *PersonnelRelCustomerCreateBulk) Save(ctx context.Context) ([]*PersonnelRelCustomer, error) {
	if prccb.err != nil {
		return nil, prccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prccb.builders))
	nodes := make([]*PersonnelRelCustomer, len(prccb.builders))
	mutators := make([]Mutator, len(prccb.builders))
	for i := range prccb.builders {
		func(i int, root context.Context) {
			builder := prccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonnelRelCustomerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prccb *PersonnelRelCustomerCreateBulk) SaveX(ctx context.Context) []*PersonnelRelCustomer {
	v, err := prccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prccb *PersonnelRelCustomerCreateBulk) Exec(ctx context.Context) error {
	_, err := prccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prccb *PersonnelRelCustomerCreateBulk) ExecX(ctx context.Context) {
	if err := prccb.Exec(ctx); err != nil {
		panic(err)
	}
}
