// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/hmertakyatan/gymapi/ent/customer"
	"github.com/hmertakyatan/gymapi/ent/membership"
	"github.com/hmertakyatan/gymapi/ent/membership_type"
	"github.com/hmertakyatan/gymapi/ent/payment"
	"github.com/hmertakyatan/gymapi/ent/personnel"
	"github.com/hmertakyatan/gymapi/ent/personnelrelcustomer"
	"github.com/hmertakyatan/gymapi/ent/predicate"
	"github.com/hmertakyatan/gymapi/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCustomer             = "Customer"
	TypeMembership           = "Membership"
	TypeMembershipType       = "Membership_type"
	TypePayment              = "Payment"
	TypePersonnel            = "Personnel"
	TypePersonnelRelCustomer = "PersonnelRelCustomer"
	TypeUser                 = "User"
)

// CustomerMutation represents an operation that mutates the Customer nodes in the graph.
type CustomerMutation struct {
	config
	op                            Op
	typ                           string
	id                            *uuid.UUID
	full_name                     *string
	birth_date                    *time.Time
	registration_date             *time.Time
	customer_picture_url          *string
	status                        *bool
	clearedFields                 map[string]struct{}
	membership                    map[uuid.UUID]struct{}
	removedmembership             map[uuid.UUID]struct{}
	clearedmembership             bool
	personnel_rel_customer        map[uuid.UUID]struct{}
	removedpersonnel_rel_customer map[uuid.UUID]struct{}
	clearedpersonnel_rel_customer bool
	done                          bool
	oldValue                      func(context.Context) (*Customer, error)
	predicates                    []predicate.Customer
}

var _ ent.Mutation = (*CustomerMutation)(nil)

// customerOption allows management of the mutation configuration using functional options.
type customerOption func(*CustomerMutation)

// newCustomerMutation creates new mutation for the Customer entity.
func newCustomerMutation(c config, op Op, opts ...customerOption) *CustomerMutation {
	m := &CustomerMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerID sets the ID field of the mutation.
func withCustomerID(id uuid.UUID) customerOption {
	return func(m *CustomerMutation) {
		var (
			err   error
			once  sync.Once
			value *Customer
		)
		m.oldValue = func(ctx context.Context) (*Customer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Customer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomer sets the old Customer of the mutation.
func withCustomer(node *Customer) customerOption {
	return func(m *CustomerMutation) {
		m.oldValue = func(context.Context) (*Customer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Customer entities.
func (m *CustomerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CustomerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CustomerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Customer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFullName sets the "full_name" field.
func (m *CustomerMutation) SetFullName(s string) {
	m.full_name = &s
}

// FullName returns the value of the "full_name" field in the mutation.
func (m *CustomerMutation) FullName() (r string, exists bool) {
	v := m.full_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFullName returns the old "full_name" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldFullName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullName: %w", err)
	}
	return oldValue.FullName, nil
}

// ResetFullName resets all changes to the "full_name" field.
func (m *CustomerMutation) ResetFullName() {
	m.full_name = nil
}

// SetBirthDate sets the "birth_date" field.
func (m *CustomerMutation) SetBirthDate(t time.Time) {
	m.birth_date = &t
}

// BirthDate returns the value of the "birth_date" field in the mutation.
func (m *CustomerMutation) BirthDate() (r time.Time, exists bool) {
	v := m.birth_date
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthDate returns the old "birth_date" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldBirthDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBirthDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBirthDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthDate: %w", err)
	}
	return oldValue.BirthDate, nil
}

// ResetBirthDate resets all changes to the "birth_date" field.
func (m *CustomerMutation) ResetBirthDate() {
	m.birth_date = nil
}

// SetRegistrationDate sets the "registration_date" field.
func (m *CustomerMutation) SetRegistrationDate(t time.Time) {
	m.registration_date = &t
}

// RegistrationDate returns the value of the "registration_date" field in the mutation.
func (m *CustomerMutation) RegistrationDate() (r time.Time, exists bool) {
	v := m.registration_date
	if v == nil {
		return
	}
	return *v, true
}

// OldRegistrationDate returns the old "registration_date" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldRegistrationDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRegistrationDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRegistrationDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRegistrationDate: %w", err)
	}
	return oldValue.RegistrationDate, nil
}

// ResetRegistrationDate resets all changes to the "registration_date" field.
func (m *CustomerMutation) ResetRegistrationDate() {
	m.registration_date = nil
}

// SetCustomerPictureURL sets the "customer_picture_url" field.
func (m *CustomerMutation) SetCustomerPictureURL(s string) {
	m.customer_picture_url = &s
}

// CustomerPictureURL returns the value of the "customer_picture_url" field in the mutation.
func (m *CustomerMutation) CustomerPictureURL() (r string, exists bool) {
	v := m.customer_picture_url
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerPictureURL returns the old "customer_picture_url" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldCustomerPictureURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerPictureURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerPictureURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerPictureURL: %w", err)
	}
	return oldValue.CustomerPictureURL, nil
}

// ClearCustomerPictureURL clears the value of the "customer_picture_url" field.
func (m *CustomerMutation) ClearCustomerPictureURL() {
	m.customer_picture_url = nil
	m.clearedFields[customer.FieldCustomerPictureURL] = struct{}{}
}

// CustomerPictureURLCleared returns if the "customer_picture_url" field was cleared in this mutation.
func (m *CustomerMutation) CustomerPictureURLCleared() bool {
	_, ok := m.clearedFields[customer.FieldCustomerPictureURL]
	return ok
}

// ResetCustomerPictureURL resets all changes to the "customer_picture_url" field.
func (m *CustomerMutation) ResetCustomerPictureURL() {
	m.customer_picture_url = nil
	delete(m.clearedFields, customer.FieldCustomerPictureURL)
}

// SetStatus sets the "status" field.
func (m *CustomerMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *CustomerMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *CustomerMutation) ResetStatus() {
	m.status = nil
}

// AddMembershipIDs adds the "membership" edge to the Membership entity by ids.
func (m *CustomerMutation) AddMembershipIDs(ids ...uuid.UUID) {
	if m.membership == nil {
		m.membership = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.membership[ids[i]] = struct{}{}
	}
}

// ClearMembership clears the "membership" edge to the Membership entity.
func (m *CustomerMutation) ClearMembership() {
	m.clearedmembership = true
}

// MembershipCleared reports if the "membership" edge to the Membership entity was cleared.
func (m *CustomerMutation) MembershipCleared() bool {
	return m.clearedmembership
}

// RemoveMembershipIDs removes the "membership" edge to the Membership entity by IDs.
func (m *CustomerMutation) RemoveMembershipIDs(ids ...uuid.UUID) {
	if m.removedmembership == nil {
		m.removedmembership = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.membership, ids[i])
		m.removedmembership[ids[i]] = struct{}{}
	}
}

// RemovedMembership returns the removed IDs of the "membership" edge to the Membership entity.
func (m *CustomerMutation) RemovedMembershipIDs() (ids []uuid.UUID) {
	for id := range m.removedmembership {
		ids = append(ids, id)
	}
	return
}

// MembershipIDs returns the "membership" edge IDs in the mutation.
func (m *CustomerMutation) MembershipIDs() (ids []uuid.UUID) {
	for id := range m.membership {
		ids = append(ids, id)
	}
	return
}

// ResetMembership resets all changes to the "membership" edge.
func (m *CustomerMutation) ResetMembership() {
	m.membership = nil
	m.clearedmembership = false
	m.removedmembership = nil
}

// AddPersonnelRelCustomerIDs adds the "personnel_rel_customer" edge to the PersonnelRelCustomer entity by ids.
func (m *CustomerMutation) AddPersonnelRelCustomerIDs(ids ...uuid.UUID) {
	if m.personnel_rel_customer == nil {
		m.personnel_rel_customer = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.personnel_rel_customer[ids[i]] = struct{}{}
	}
}

// ClearPersonnelRelCustomer clears the "personnel_rel_customer" edge to the PersonnelRelCustomer entity.
func (m *CustomerMutation) ClearPersonnelRelCustomer() {
	m.clearedpersonnel_rel_customer = true
}

// PersonnelRelCustomerCleared reports if the "personnel_rel_customer" edge to the PersonnelRelCustomer entity was cleared.
func (m *CustomerMutation) PersonnelRelCustomerCleared() bool {
	return m.clearedpersonnel_rel_customer
}

// RemovePersonnelRelCustomerIDs removes the "personnel_rel_customer" edge to the PersonnelRelCustomer entity by IDs.
func (m *CustomerMutation) RemovePersonnelRelCustomerIDs(ids ...uuid.UUID) {
	if m.removedpersonnel_rel_customer == nil {
		m.removedpersonnel_rel_customer = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.personnel_rel_customer, ids[i])
		m.removedpersonnel_rel_customer[ids[i]] = struct{}{}
	}
}

// RemovedPersonnelRelCustomer returns the removed IDs of the "personnel_rel_customer" edge to the PersonnelRelCustomer entity.
func (m *CustomerMutation) RemovedPersonnelRelCustomerIDs() (ids []uuid.UUID) {
	for id := range m.removedpersonnel_rel_customer {
		ids = append(ids, id)
	}
	return
}

// PersonnelRelCustomerIDs returns the "personnel_rel_customer" edge IDs in the mutation.
func (m *CustomerMutation) PersonnelRelCustomerIDs() (ids []uuid.UUID) {
	for id := range m.personnel_rel_customer {
		ids = append(ids, id)
	}
	return
}

// ResetPersonnelRelCustomer resets all changes to the "personnel_rel_customer" edge.
func (m *CustomerMutation) ResetPersonnelRelCustomer() {
	m.personnel_rel_customer = nil
	m.clearedpersonnel_rel_customer = false
	m.removedpersonnel_rel_customer = nil
}

// Where appends a list predicates to the CustomerMutation builder.
func (m *CustomerMutation) Where(ps ...predicate.Customer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CustomerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CustomerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Customer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CustomerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CustomerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Customer).
func (m *CustomerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CustomerMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.full_name != nil {
		fields = append(fields, customer.FieldFullName)
	}
	if m.birth_date != nil {
		fields = append(fields, customer.FieldBirthDate)
	}
	if m.registration_date != nil {
		fields = append(fields, customer.FieldRegistrationDate)
	}
	if m.customer_picture_url != nil {
		fields = append(fields, customer.FieldCustomerPictureURL)
	}
	if m.status != nil {
		fields = append(fields, customer.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CustomerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customer.FieldFullName:
		return m.FullName()
	case customer.FieldBirthDate:
		return m.BirthDate()
	case customer.FieldRegistrationDate:
		return m.RegistrationDate()
	case customer.FieldCustomerPictureURL:
		return m.CustomerPictureURL()
	case customer.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CustomerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customer.FieldFullName:
		return m.OldFullName(ctx)
	case customer.FieldBirthDate:
		return m.OldBirthDate(ctx)
	case customer.FieldRegistrationDate:
		return m.OldRegistrationDate(ctx)
	case customer.FieldCustomerPictureURL:
		return m.OldCustomerPictureURL(ctx)
	case customer.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Customer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customer.FieldFullName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullName(v)
		return nil
	case customer.FieldBirthDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthDate(v)
		return nil
	case customer.FieldRegistrationDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRegistrationDate(v)
		return nil
	case customer.FieldCustomerPictureURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerPictureURL(v)
		return nil
	case customer.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CustomerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CustomerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CustomerMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(customer.FieldCustomerPictureURL) {
		fields = append(fields, customer.FieldCustomerPictureURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CustomerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerMutation) ClearField(name string) error {
	switch name {
	case customer.FieldCustomerPictureURL:
		m.ClearCustomerPictureURL()
		return nil
	}
	return fmt.Errorf("unknown Customer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CustomerMutation) ResetField(name string) error {
	switch name {
	case customer.FieldFullName:
		m.ResetFullName()
		return nil
	case customer.FieldBirthDate:
		m.ResetBirthDate()
		return nil
	case customer.FieldRegistrationDate:
		m.ResetRegistrationDate()
		return nil
	case customer.FieldCustomerPictureURL:
		m.ResetCustomerPictureURL()
		return nil
	case customer.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CustomerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.membership != nil {
		edges = append(edges, customer.EdgeMembership)
	}
	if m.personnel_rel_customer != nil {
		edges = append(edges, customer.EdgePersonnelRelCustomer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CustomerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeMembership:
		ids := make([]ent.Value, 0, len(m.membership))
		for id := range m.membership {
			ids = append(ids, id)
		}
		return ids
	case customer.EdgePersonnelRelCustomer:
		ids := make([]ent.Value, 0, len(m.personnel_rel_customer))
		for id := range m.personnel_rel_customer {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CustomerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmembership != nil {
		edges = append(edges, customer.EdgeMembership)
	}
	if m.removedpersonnel_rel_customer != nil {
		edges = append(edges, customer.EdgePersonnelRelCustomer)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CustomerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeMembership:
		ids := make([]ent.Value, 0, len(m.removedmembership))
		for id := range m.removedmembership {
			ids = append(ids, id)
		}
		return ids
	case customer.EdgePersonnelRelCustomer:
		ids := make([]ent.Value, 0, len(m.removedpersonnel_rel_customer))
		for id := range m.removedpersonnel_rel_customer {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CustomerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmembership {
		edges = append(edges, customer.EdgeMembership)
	}
	if m.clearedpersonnel_rel_customer {
		edges = append(edges, customer.EdgePersonnelRelCustomer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CustomerMutation) EdgeCleared(name string) bool {
	switch name {
	case customer.EdgeMembership:
		return m.clearedmembership
	case customer.EdgePersonnelRelCustomer:
		return m.clearedpersonnel_rel_customer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CustomerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CustomerMutation) ResetEdge(name string) error {
	switch name {
	case customer.EdgeMembership:
		m.ResetMembership()
		return nil
	case customer.EdgePersonnelRelCustomer:
		m.ResetPersonnelRelCustomer()
		return nil
	}
	return fmt.Errorf("unknown Customer edge %s", name)
}

// MembershipMutation represents an operation that mutates the Membership nodes in the graph.
type MembershipMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	operation_date      *time.Time
	start_date          *time.Time
	end_date            *time.Time
	amount_paid         *float64
	addamount_paid      *float64
	amount_remaining    *float64
	addamount_remaining *float64
	clearedFields       map[string]struct{}
	customer            *uuid.UUID
	clearedcustomer     bool
	done                bool
	oldValue            func(context.Context) (*Membership, error)
	predicates          []predicate.Membership
}

var _ ent.Mutation = (*MembershipMutation)(nil)

// membershipOption allows management of the mutation configuration using functional options.
type membershipOption func(*MembershipMutation)

// newMembershipMutation creates new mutation for the Membership entity.
func newMembershipMutation(c config, op Op, opts ...membershipOption) *MembershipMutation {
	m := &MembershipMutation{
		config:        c,
		op:            op,
		typ:           TypeMembership,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMembershipID sets the ID field of the mutation.
func withMembershipID(id uuid.UUID) membershipOption {
	return func(m *MembershipMutation) {
		var (
			err   error
			once  sync.Once
			value *Membership
		)
		m.oldValue = func(ctx context.Context) (*Membership, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Membership.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMembership sets the old Membership of the mutation.
func withMembership(node *Membership) membershipOption {
	return func(m *MembershipMutation) {
		m.oldValue = func(context.Context) (*Membership, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MembershipMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MembershipMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Membership entities.
func (m *MembershipMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MembershipMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MembershipMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Membership.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOperationDate sets the "operation_date" field.
func (m *MembershipMutation) SetOperationDate(t time.Time) {
	m.operation_date = &t
}

// OperationDate returns the value of the "operation_date" field in the mutation.
func (m *MembershipMutation) OperationDate() (r time.Time, exists bool) {
	v := m.operation_date
	if v == nil {
		return
	}
	return *v, true
}

// OldOperationDate returns the old "operation_date" field's value of the Membership entity.
// If the Membership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MembershipMutation) OldOperationDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperationDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperationDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperationDate: %w", err)
	}
	return oldValue.OperationDate, nil
}

// ResetOperationDate resets all changes to the "operation_date" field.
func (m *MembershipMutation) ResetOperationDate() {
	m.operation_date = nil
}

// SetStartDate sets the "start_date" field.
func (m *MembershipMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *MembershipMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the Membership entity.
// If the Membership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MembershipMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *MembershipMutation) ResetStartDate() {
	m.start_date = nil
}

// SetEndDate sets the "end_date" field.
func (m *MembershipMutation) SetEndDate(t time.Time) {
	m.end_date = &t
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *MembershipMutation) EndDate() (r time.Time, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the Membership entity.
// If the Membership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MembershipMutation) OldEndDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *MembershipMutation) ResetEndDate() {
	m.end_date = nil
}

// SetAmountPaid sets the "amount_paid" field.
func (m *MembershipMutation) SetAmountPaid(f float64) {
	m.amount_paid = &f
	m.addamount_paid = nil
}

// AmountPaid returns the value of the "amount_paid" field in the mutation.
func (m *MembershipMutation) AmountPaid() (r float64, exists bool) {
	v := m.amount_paid
	if v == nil {
		return
	}
	return *v, true
}

// OldAmountPaid returns the old "amount_paid" field's value of the Membership entity.
// If the Membership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MembershipMutation) OldAmountPaid(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmountPaid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmountPaid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmountPaid: %w", err)
	}
	return oldValue.AmountPaid, nil
}

// AddAmountPaid adds f to the "amount_paid" field.
func (m *MembershipMutation) AddAmountPaid(f float64) {
	if m.addamount_paid != nil {
		*m.addamount_paid += f
	} else {
		m.addamount_paid = &f
	}
}

// AddedAmountPaid returns the value that was added to the "amount_paid" field in this mutation.
func (m *MembershipMutation) AddedAmountPaid() (r float64, exists bool) {
	v := m.addamount_paid
	if v == nil {
		return
	}
	return *v, true
}

// ClearAmountPaid clears the value of the "amount_paid" field.
func (m *MembershipMutation) ClearAmountPaid() {
	m.amount_paid = nil
	m.addamount_paid = nil
	m.clearedFields[membership.FieldAmountPaid] = struct{}{}
}

// AmountPaidCleared returns if the "amount_paid" field was cleared in this mutation.
func (m *MembershipMutation) AmountPaidCleared() bool {
	_, ok := m.clearedFields[membership.FieldAmountPaid]
	return ok
}

// ResetAmountPaid resets all changes to the "amount_paid" field.
func (m *MembershipMutation) ResetAmountPaid() {
	m.amount_paid = nil
	m.addamount_paid = nil
	delete(m.clearedFields, membership.FieldAmountPaid)
}

// SetAmountRemaining sets the "amount_remaining" field.
func (m *MembershipMutation) SetAmountRemaining(f float64) {
	m.amount_remaining = &f
	m.addamount_remaining = nil
}

// AmountRemaining returns the value of the "amount_remaining" field in the mutation.
func (m *MembershipMutation) AmountRemaining() (r float64, exists bool) {
	v := m.amount_remaining
	if v == nil {
		return
	}
	return *v, true
}

// OldAmountRemaining returns the old "amount_remaining" field's value of the Membership entity.
// If the Membership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MembershipMutation) OldAmountRemaining(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmountRemaining is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmountRemaining requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmountRemaining: %w", err)
	}
	return oldValue.AmountRemaining, nil
}

// AddAmountRemaining adds f to the "amount_remaining" field.
func (m *MembershipMutation) AddAmountRemaining(f float64) {
	if m.addamount_remaining != nil {
		*m.addamount_remaining += f
	} else {
		m.addamount_remaining = &f
	}
}

// AddedAmountRemaining returns the value that was added to the "amount_remaining" field in this mutation.
func (m *MembershipMutation) AddedAmountRemaining() (r float64, exists bool) {
	v := m.addamount_remaining
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmountRemaining resets all changes to the "amount_remaining" field.
func (m *MembershipMutation) ResetAmountRemaining() {
	m.amount_remaining = nil
	m.addamount_remaining = nil
}

// SetCustomerID sets the "customer" edge to the Customer entity by id.
func (m *MembershipMutation) SetCustomerID(id uuid.UUID) {
	m.customer = &id
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (m *MembershipMutation) ClearCustomer() {
	m.clearedcustomer = true
}

// CustomerCleared reports if the "customer" edge to the Customer entity was cleared.
func (m *MembershipMutation) CustomerCleared() bool {
	return m.clearedcustomer
}

// CustomerID returns the "customer" edge ID in the mutation.
func (m *MembershipMutation) CustomerID() (id uuid.UUID, exists bool) {
	if m.customer != nil {
		return *m.customer, true
	}
	return
}

// CustomerIDs returns the "customer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CustomerID instead. It exists only for internal usage by the builders.
func (m *MembershipMutation) CustomerIDs() (ids []uuid.UUID) {
	if id := m.customer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCustomer resets all changes to the "customer" edge.
func (m *MembershipMutation) ResetCustomer() {
	m.customer = nil
	m.clearedcustomer = false
}

// Where appends a list predicates to the MembershipMutation builder.
func (m *MembershipMutation) Where(ps ...predicate.Membership) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MembershipMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MembershipMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Membership, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MembershipMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MembershipMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Membership).
func (m *MembershipMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MembershipMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.operation_date != nil {
		fields = append(fields, membership.FieldOperationDate)
	}
	if m.start_date != nil {
		fields = append(fields, membership.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, membership.FieldEndDate)
	}
	if m.amount_paid != nil {
		fields = append(fields, membership.FieldAmountPaid)
	}
	if m.amount_remaining != nil {
		fields = append(fields, membership.FieldAmountRemaining)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MembershipMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case membership.FieldOperationDate:
		return m.OperationDate()
	case membership.FieldStartDate:
		return m.StartDate()
	case membership.FieldEndDate:
		return m.EndDate()
	case membership.FieldAmountPaid:
		return m.AmountPaid()
	case membership.FieldAmountRemaining:
		return m.AmountRemaining()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MembershipMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case membership.FieldOperationDate:
		return m.OldOperationDate(ctx)
	case membership.FieldStartDate:
		return m.OldStartDate(ctx)
	case membership.FieldEndDate:
		return m.OldEndDate(ctx)
	case membership.FieldAmountPaid:
		return m.OldAmountPaid(ctx)
	case membership.FieldAmountRemaining:
		return m.OldAmountRemaining(ctx)
	}
	return nil, fmt.Errorf("unknown Membership field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MembershipMutation) SetField(name string, value ent.Value) error {
	switch name {
	case membership.FieldOperationDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperationDate(v)
		return nil
	case membership.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case membership.FieldEndDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	case membership.FieldAmountPaid:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmountPaid(v)
		return nil
	case membership.FieldAmountRemaining:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmountRemaining(v)
		return nil
	}
	return fmt.Errorf("unknown Membership field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MembershipMutation) AddedFields() []string {
	var fields []string
	if m.addamount_paid != nil {
		fields = append(fields, membership.FieldAmountPaid)
	}
	if m.addamount_remaining != nil {
		fields = append(fields, membership.FieldAmountRemaining)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MembershipMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case membership.FieldAmountPaid:
		return m.AddedAmountPaid()
	case membership.FieldAmountRemaining:
		return m.AddedAmountRemaining()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MembershipMutation) AddField(name string, value ent.Value) error {
	switch name {
	case membership.FieldAmountPaid:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmountPaid(v)
		return nil
	case membership.FieldAmountRemaining:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmountRemaining(v)
		return nil
	}
	return fmt.Errorf("unknown Membership numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MembershipMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(membership.FieldAmountPaid) {
		fields = append(fields, membership.FieldAmountPaid)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MembershipMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MembershipMutation) ClearField(name string) error {
	switch name {
	case membership.FieldAmountPaid:
		m.ClearAmountPaid()
		return nil
	}
	return fmt.Errorf("unknown Membership nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MembershipMutation) ResetField(name string) error {
	switch name {
	case membership.FieldOperationDate:
		m.ResetOperationDate()
		return nil
	case membership.FieldStartDate:
		m.ResetStartDate()
		return nil
	case membership.FieldEndDate:
		m.ResetEndDate()
		return nil
	case membership.FieldAmountPaid:
		m.ResetAmountPaid()
		return nil
	case membership.FieldAmountRemaining:
		m.ResetAmountRemaining()
		return nil
	}
	return fmt.Errorf("unknown Membership field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MembershipMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.customer != nil {
		edges = append(edges, membership.EdgeCustomer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MembershipMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case membership.EdgeCustomer:
		if id := m.customer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MembershipMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MembershipMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MembershipMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcustomer {
		edges = append(edges, membership.EdgeCustomer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MembershipMutation) EdgeCleared(name string) bool {
	switch name {
	case membership.EdgeCustomer:
		return m.clearedcustomer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MembershipMutation) ClearEdge(name string) error {
	switch name {
	case membership.EdgeCustomer:
		m.ClearCustomer()
		return nil
	}
	return fmt.Errorf("unknown Membership unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MembershipMutation) ResetEdge(name string) error {
	switch name {
	case membership.EdgeCustomer:
		m.ResetCustomer()
		return nil
	}
	return fmt.Errorf("unknown Membership edge %s", name)
}

// MembershipTypeMutation represents an operation that mutates the Membership_type nodes in the graph.
type MembershipTypeMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	name                *string
	description         *string
	membership_month    *uint8
	addmembership_month *int8
	price               *float64
	addprice            *float64
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*Membership_type, error)
	predicates          []predicate.Membership_type
}

var _ ent.Mutation = (*MembershipTypeMutation)(nil)

// membershipTypeOption allows management of the mutation configuration using functional options.
type membershipTypeOption func(*MembershipTypeMutation)

// newMembershipTypeMutation creates new mutation for the Membership_type entity.
func newMembershipTypeMutation(c config, op Op, opts ...membershipTypeOption) *MembershipTypeMutation {
	m := &MembershipTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeMembershipType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMembership_typeID sets the ID field of the mutation.
func withMembership_typeID(id uuid.UUID) membershipTypeOption {
	return func(m *MembershipTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *Membership_type
		)
		m.oldValue = func(ctx context.Context) (*Membership_type, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Membership_type.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMembership_type sets the old Membership_type of the mutation.
func withMembership_type(node *Membership_type) membershipTypeOption {
	return func(m *MembershipTypeMutation) {
		m.oldValue = func(context.Context) (*Membership_type, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MembershipTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MembershipTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Membership_type entities.
func (m *MembershipTypeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MembershipTypeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MembershipTypeMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Membership_type.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *MembershipTypeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MembershipTypeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Membership_type entity.
// If the Membership_type object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MembershipTypeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MembershipTypeMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *MembershipTypeMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MembershipTypeMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Membership_type entity.
// If the Membership_type object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MembershipTypeMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *MembershipTypeMutation) ResetDescription() {
	m.description = nil
}

// SetMembershipMonth sets the "membership_month" field.
func (m *MembershipTypeMutation) SetMembershipMonth(u uint8) {
	m.membership_month = &u
	m.addmembership_month = nil
}

// MembershipMonth returns the value of the "membership_month" field in the mutation.
func (m *MembershipTypeMutation) MembershipMonth() (r uint8, exists bool) {
	v := m.membership_month
	if v == nil {
		return
	}
	return *v, true
}

// OldMembershipMonth returns the old "membership_month" field's value of the Membership_type entity.
// If the Membership_type object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MembershipTypeMutation) OldMembershipMonth(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMembershipMonth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMembershipMonth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMembershipMonth: %w", err)
	}
	return oldValue.MembershipMonth, nil
}

// AddMembershipMonth adds u to the "membership_month" field.
func (m *MembershipTypeMutation) AddMembershipMonth(u int8) {
	if m.addmembership_month != nil {
		*m.addmembership_month += u
	} else {
		m.addmembership_month = &u
	}
}

// AddedMembershipMonth returns the value that was added to the "membership_month" field in this mutation.
func (m *MembershipTypeMutation) AddedMembershipMonth() (r int8, exists bool) {
	v := m.addmembership_month
	if v == nil {
		return
	}
	return *v, true
}

// ResetMembershipMonth resets all changes to the "membership_month" field.
func (m *MembershipTypeMutation) ResetMembershipMonth() {
	m.membership_month = nil
	m.addmembership_month = nil
}

// SetPrice sets the "price" field.
func (m *MembershipTypeMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *MembershipTypeMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Membership_type entity.
// If the Membership_type object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MembershipTypeMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *MembershipTypeMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *MembershipTypeMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *MembershipTypeMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// Where appends a list predicates to the MembershipTypeMutation builder.
func (m *MembershipTypeMutation) Where(ps ...predicate.Membership_type) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MembershipTypeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MembershipTypeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Membership_type, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MembershipTypeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MembershipTypeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Membership_type).
func (m *MembershipTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MembershipTypeMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, membership_type.FieldName)
	}
	if m.description != nil {
		fields = append(fields, membership_type.FieldDescription)
	}
	if m.membership_month != nil {
		fields = append(fields, membership_type.FieldMembershipMonth)
	}
	if m.price != nil {
		fields = append(fields, membership_type.FieldPrice)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MembershipTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case membership_type.FieldName:
		return m.Name()
	case membership_type.FieldDescription:
		return m.Description()
	case membership_type.FieldMembershipMonth:
		return m.MembershipMonth()
	case membership_type.FieldPrice:
		return m.Price()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MembershipTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case membership_type.FieldName:
		return m.OldName(ctx)
	case membership_type.FieldDescription:
		return m.OldDescription(ctx)
	case membership_type.FieldMembershipMonth:
		return m.OldMembershipMonth(ctx)
	case membership_type.FieldPrice:
		return m.OldPrice(ctx)
	}
	return nil, fmt.Errorf("unknown Membership_type field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MembershipTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case membership_type.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case membership_type.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case membership_type.FieldMembershipMonth:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMembershipMonth(v)
		return nil
	case membership_type.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	}
	return fmt.Errorf("unknown Membership_type field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MembershipTypeMutation) AddedFields() []string {
	var fields []string
	if m.addmembership_month != nil {
		fields = append(fields, membership_type.FieldMembershipMonth)
	}
	if m.addprice != nil {
		fields = append(fields, membership_type.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MembershipTypeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case membership_type.FieldMembershipMonth:
		return m.AddedMembershipMonth()
	case membership_type.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MembershipTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case membership_type.FieldMembershipMonth:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMembershipMonth(v)
		return nil
	case membership_type.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown Membership_type numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MembershipTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MembershipTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MembershipTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Membership_type nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MembershipTypeMutation) ResetField(name string) error {
	switch name {
	case membership_type.FieldName:
		m.ResetName()
		return nil
	case membership_type.FieldDescription:
		m.ResetDescription()
		return nil
	case membership_type.FieldMembershipMonth:
		m.ResetMembershipMonth()
		return nil
	case membership_type.FieldPrice:
		m.ResetPrice()
		return nil
	}
	return fmt.Errorf("unknown Membership_type field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MembershipTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MembershipTypeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MembershipTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MembershipTypeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MembershipTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MembershipTypeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MembershipTypeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Membership_type unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MembershipTypeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Membership_type edge %s", name)
}

// PaymentMutation represents an operation that mutates the Payment nodes in the graph.
type PaymentMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	_type         *payment.Type
	description   *string
	amount        *float64
	addamount     *float64
	date_time     *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Payment, error)
	predicates    []predicate.Payment
}

var _ ent.Mutation = (*PaymentMutation)(nil)

// paymentOption allows management of the mutation configuration using functional options.
type paymentOption func(*PaymentMutation)

// newPaymentMutation creates new mutation for the Payment entity.
func newPaymentMutation(c config, op Op, opts ...paymentOption) *PaymentMutation {
	m := &PaymentMutation{
		config:        c,
		op:            op,
		typ:           TypePayment,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPaymentID sets the ID field of the mutation.
func withPaymentID(id uuid.UUID) paymentOption {
	return func(m *PaymentMutation) {
		var (
			err   error
			once  sync.Once
			value *Payment
		)
		m.oldValue = func(ctx context.Context) (*Payment, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Payment.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPayment sets the old Payment of the mutation.
func withPayment(node *Payment) paymentOption {
	return func(m *PaymentMutation) {
		m.oldValue = func(context.Context) (*Payment, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PaymentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PaymentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Payment entities.
func (m *PaymentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PaymentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PaymentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Payment.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *PaymentMutation) SetType(pa payment.Type) {
	m._type = &pa
}

// GetType returns the value of the "type" field in the mutation.
func (m *PaymentMutation) GetType() (r payment.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldType(ctx context.Context) (v payment.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *PaymentMutation) ResetType() {
	m._type = nil
}

// SetDescription sets the "description" field.
func (m *PaymentMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PaymentMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *PaymentMutation) ResetDescription() {
	m.description = nil
}

// SetAmount sets the "amount" field.
func (m *PaymentMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *PaymentMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *PaymentMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *PaymentMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *PaymentMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetDateTime sets the "date_time" field.
func (m *PaymentMutation) SetDateTime(t time.Time) {
	m.date_time = &t
}

// DateTime returns the value of the "date_time" field in the mutation.
func (m *PaymentMutation) DateTime() (r time.Time, exists bool) {
	v := m.date_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDateTime returns the old "date_time" field's value of the Payment entity.
// If the Payment object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PaymentMutation) OldDateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateTime: %w", err)
	}
	return oldValue.DateTime, nil
}

// ResetDateTime resets all changes to the "date_time" field.
func (m *PaymentMutation) ResetDateTime() {
	m.date_time = nil
}

// Where appends a list predicates to the PaymentMutation builder.
func (m *PaymentMutation) Where(ps ...predicate.Payment) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PaymentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PaymentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Payment, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PaymentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PaymentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Payment).
func (m *PaymentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PaymentMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._type != nil {
		fields = append(fields, payment.FieldType)
	}
	if m.description != nil {
		fields = append(fields, payment.FieldDescription)
	}
	if m.amount != nil {
		fields = append(fields, payment.FieldAmount)
	}
	if m.date_time != nil {
		fields = append(fields, payment.FieldDateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PaymentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case payment.FieldType:
		return m.GetType()
	case payment.FieldDescription:
		return m.Description()
	case payment.FieldAmount:
		return m.Amount()
	case payment.FieldDateTime:
		return m.DateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PaymentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case payment.FieldType:
		return m.OldType(ctx)
	case payment.FieldDescription:
		return m.OldDescription(ctx)
	case payment.FieldAmount:
		return m.OldAmount(ctx)
	case payment.FieldDateTime:
		return m.OldDateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Payment field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case payment.FieldType:
		v, ok := value.(payment.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case payment.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case payment.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case payment.FieldDateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PaymentMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, payment.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PaymentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case payment.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PaymentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case payment.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Payment numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PaymentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PaymentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PaymentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Payment nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PaymentMutation) ResetField(name string) error {
	switch name {
	case payment.FieldType:
		m.ResetType()
		return nil
	case payment.FieldDescription:
		m.ResetDescription()
		return nil
	case payment.FieldAmount:
		m.ResetAmount()
		return nil
	case payment.FieldDateTime:
		m.ResetDateTime()
		return nil
	}
	return fmt.Errorf("unknown Payment field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PaymentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PaymentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PaymentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PaymentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PaymentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PaymentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PaymentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Payment unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PaymentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Payment edge %s", name)
}

// PersonnelMutation represents an operation that mutates the Personnel nodes in the graph.
type PersonnelMutation struct {
	config
	op                            Op
	typ                           string
	id                            *uuid.UUID
	name                          *string
	salary                        *float64
	addsalary                     *float64
	description                   *string
	bith_date                     *time.Time
	start_date                    *time.Time
	status                        *bool
	clearedFields                 map[string]struct{}
	personnel_rel_customer        map[uuid.UUID]struct{}
	removedpersonnel_rel_customer map[uuid.UUID]struct{}
	clearedpersonnel_rel_customer bool
	done                          bool
	oldValue                      func(context.Context) (*Personnel, error)
	predicates                    []predicate.Personnel
}

var _ ent.Mutation = (*PersonnelMutation)(nil)

// personnelOption allows management of the mutation configuration using functional options.
type personnelOption func(*PersonnelMutation)

// newPersonnelMutation creates new mutation for the Personnel entity.
func newPersonnelMutation(c config, op Op, opts ...personnelOption) *PersonnelMutation {
	m := &PersonnelMutation{
		config:        c,
		op:            op,
		typ:           TypePersonnel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPersonnelID sets the ID field of the mutation.
func withPersonnelID(id uuid.UUID) personnelOption {
	return func(m *PersonnelMutation) {
		var (
			err   error
			once  sync.Once
			value *Personnel
		)
		m.oldValue = func(ctx context.Context) (*Personnel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Personnel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPersonnel sets the old Personnel of the mutation.
func withPersonnel(node *Personnel) personnelOption {
	return func(m *PersonnelMutation) {
		m.oldValue = func(context.Context) (*Personnel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PersonnelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PersonnelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Personnel entities.
func (m *PersonnelMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PersonnelMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PersonnelMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Personnel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PersonnelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PersonnelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Personnel entity.
// If the Personnel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonnelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PersonnelMutation) ResetName() {
	m.name = nil
}

// SetSalary sets the "salary" field.
func (m *PersonnelMutation) SetSalary(f float64) {
	m.salary = &f
	m.addsalary = nil
}

// Salary returns the value of the "salary" field in the mutation.
func (m *PersonnelMutation) Salary() (r float64, exists bool) {
	v := m.salary
	if v == nil {
		return
	}
	return *v, true
}

// OldSalary returns the old "salary" field's value of the Personnel entity.
// If the Personnel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonnelMutation) OldSalary(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalary: %w", err)
	}
	return oldValue.Salary, nil
}

// AddSalary adds f to the "salary" field.
func (m *PersonnelMutation) AddSalary(f float64) {
	if m.addsalary != nil {
		*m.addsalary += f
	} else {
		m.addsalary = &f
	}
}

// AddedSalary returns the value that was added to the "salary" field in this mutation.
func (m *PersonnelMutation) AddedSalary() (r float64, exists bool) {
	v := m.addsalary
	if v == nil {
		return
	}
	return *v, true
}

// ResetSalary resets all changes to the "salary" field.
func (m *PersonnelMutation) ResetSalary() {
	m.salary = nil
	m.addsalary = nil
}

// SetDescription sets the "description" field.
func (m *PersonnelMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PersonnelMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Personnel entity.
// If the Personnel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonnelMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *PersonnelMutation) ResetDescription() {
	m.description = nil
}

// SetBithDate sets the "bith_date" field.
func (m *PersonnelMutation) SetBithDate(t time.Time) {
	m.bith_date = &t
}

// BithDate returns the value of the "bith_date" field in the mutation.
func (m *PersonnelMutation) BithDate() (r time.Time, exists bool) {
	v := m.bith_date
	if v == nil {
		return
	}
	return *v, true
}

// OldBithDate returns the old "bith_date" field's value of the Personnel entity.
// If the Personnel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonnelMutation) OldBithDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBithDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBithDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBithDate: %w", err)
	}
	return oldValue.BithDate, nil
}

// ResetBithDate resets all changes to the "bith_date" field.
func (m *PersonnelMutation) ResetBithDate() {
	m.bith_date = nil
}

// SetStartDate sets the "start_date" field.
func (m *PersonnelMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *PersonnelMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the Personnel entity.
// If the Personnel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonnelMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *PersonnelMutation) ResetStartDate() {
	m.start_date = nil
}

// SetStatus sets the "status" field.
func (m *PersonnelMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *PersonnelMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Personnel entity.
// If the Personnel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonnelMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *PersonnelMutation) ResetStatus() {
	m.status = nil
}

// AddPersonnelRelCustomerIDs adds the "personnel_rel_customer" edge to the PersonnelRelCustomer entity by ids.
func (m *PersonnelMutation) AddPersonnelRelCustomerIDs(ids ...uuid.UUID) {
	if m.personnel_rel_customer == nil {
		m.personnel_rel_customer = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.personnel_rel_customer[ids[i]] = struct{}{}
	}
}

// ClearPersonnelRelCustomer clears the "personnel_rel_customer" edge to the PersonnelRelCustomer entity.
func (m *PersonnelMutation) ClearPersonnelRelCustomer() {
	m.clearedpersonnel_rel_customer = true
}

// PersonnelRelCustomerCleared reports if the "personnel_rel_customer" edge to the PersonnelRelCustomer entity was cleared.
func (m *PersonnelMutation) PersonnelRelCustomerCleared() bool {
	return m.clearedpersonnel_rel_customer
}

// RemovePersonnelRelCustomerIDs removes the "personnel_rel_customer" edge to the PersonnelRelCustomer entity by IDs.
func (m *PersonnelMutation) RemovePersonnelRelCustomerIDs(ids ...uuid.UUID) {
	if m.removedpersonnel_rel_customer == nil {
		m.removedpersonnel_rel_customer = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.personnel_rel_customer, ids[i])
		m.removedpersonnel_rel_customer[ids[i]] = struct{}{}
	}
}

// RemovedPersonnelRelCustomer returns the removed IDs of the "personnel_rel_customer" edge to the PersonnelRelCustomer entity.
func (m *PersonnelMutation) RemovedPersonnelRelCustomerIDs() (ids []uuid.UUID) {
	for id := range m.removedpersonnel_rel_customer {
		ids = append(ids, id)
	}
	return
}

// PersonnelRelCustomerIDs returns the "personnel_rel_customer" edge IDs in the mutation.
func (m *PersonnelMutation) PersonnelRelCustomerIDs() (ids []uuid.UUID) {
	for id := range m.personnel_rel_customer {
		ids = append(ids, id)
	}
	return
}

// ResetPersonnelRelCustomer resets all changes to the "personnel_rel_customer" edge.
func (m *PersonnelMutation) ResetPersonnelRelCustomer() {
	m.personnel_rel_customer = nil
	m.clearedpersonnel_rel_customer = false
	m.removedpersonnel_rel_customer = nil
}

// Where appends a list predicates to the PersonnelMutation builder.
func (m *PersonnelMutation) Where(ps ...predicate.Personnel) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PersonnelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PersonnelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Personnel, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PersonnelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PersonnelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Personnel).
func (m *PersonnelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PersonnelMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, personnel.FieldName)
	}
	if m.salary != nil {
		fields = append(fields, personnel.FieldSalary)
	}
	if m.description != nil {
		fields = append(fields, personnel.FieldDescription)
	}
	if m.bith_date != nil {
		fields = append(fields, personnel.FieldBithDate)
	}
	if m.start_date != nil {
		fields = append(fields, personnel.FieldStartDate)
	}
	if m.status != nil {
		fields = append(fields, personnel.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PersonnelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case personnel.FieldName:
		return m.Name()
	case personnel.FieldSalary:
		return m.Salary()
	case personnel.FieldDescription:
		return m.Description()
	case personnel.FieldBithDate:
		return m.BithDate()
	case personnel.FieldStartDate:
		return m.StartDate()
	case personnel.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PersonnelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case personnel.FieldName:
		return m.OldName(ctx)
	case personnel.FieldSalary:
		return m.OldSalary(ctx)
	case personnel.FieldDescription:
		return m.OldDescription(ctx)
	case personnel.FieldBithDate:
		return m.OldBithDate(ctx)
	case personnel.FieldStartDate:
		return m.OldStartDate(ctx)
	case personnel.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown Personnel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonnelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case personnel.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case personnel.FieldSalary:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalary(v)
		return nil
	case personnel.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case personnel.FieldBithDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBithDate(v)
		return nil
	case personnel.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case personnel.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Personnel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PersonnelMutation) AddedFields() []string {
	var fields []string
	if m.addsalary != nil {
		fields = append(fields, personnel.FieldSalary)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PersonnelMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case personnel.FieldSalary:
		return m.AddedSalary()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonnelMutation) AddField(name string, value ent.Value) error {
	switch name {
	case personnel.FieldSalary:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSalary(v)
		return nil
	}
	return fmt.Errorf("unknown Personnel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PersonnelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PersonnelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PersonnelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Personnel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PersonnelMutation) ResetField(name string) error {
	switch name {
	case personnel.FieldName:
		m.ResetName()
		return nil
	case personnel.FieldSalary:
		m.ResetSalary()
		return nil
	case personnel.FieldDescription:
		m.ResetDescription()
		return nil
	case personnel.FieldBithDate:
		m.ResetBithDate()
		return nil
	case personnel.FieldStartDate:
		m.ResetStartDate()
		return nil
	case personnel.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown Personnel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PersonnelMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.personnel_rel_customer != nil {
		edges = append(edges, personnel.EdgePersonnelRelCustomer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PersonnelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case personnel.EdgePersonnelRelCustomer:
		ids := make([]ent.Value, 0, len(m.personnel_rel_customer))
		for id := range m.personnel_rel_customer {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PersonnelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedpersonnel_rel_customer != nil {
		edges = append(edges, personnel.EdgePersonnelRelCustomer)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PersonnelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case personnel.EdgePersonnelRelCustomer:
		ids := make([]ent.Value, 0, len(m.removedpersonnel_rel_customer))
		for id := range m.removedpersonnel_rel_customer {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PersonnelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpersonnel_rel_customer {
		edges = append(edges, personnel.EdgePersonnelRelCustomer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PersonnelMutation) EdgeCleared(name string) bool {
	switch name {
	case personnel.EdgePersonnelRelCustomer:
		return m.clearedpersonnel_rel_customer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PersonnelMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Personnel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PersonnelMutation) ResetEdge(name string) error {
	switch name {
	case personnel.EdgePersonnelRelCustomer:
		m.ResetPersonnelRelCustomer()
		return nil
	}
	return fmt.Errorf("unknown Personnel edge %s", name)
}

// PersonnelRelCustomerMutation represents an operation that mutates the PersonnelRelCustomer nodes in the graph.
type PersonnelRelCustomerMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	description      *string
	price            *float64
	addprice         *float64
	clearedFields    map[string]struct{}
	personnel        *uuid.UUID
	clearedpersonnel bool
	customer         *uuid.UUID
	clearedcustomer  bool
	done             bool
	oldValue         func(context.Context) (*PersonnelRelCustomer, error)
	predicates       []predicate.PersonnelRelCustomer
}

var _ ent.Mutation = (*PersonnelRelCustomerMutation)(nil)

// personnelrelcustomerOption allows management of the mutation configuration using functional options.
type personnelrelcustomerOption func(*PersonnelRelCustomerMutation)

// newPersonnelRelCustomerMutation creates new mutation for the PersonnelRelCustomer entity.
func newPersonnelRelCustomerMutation(c config, op Op, opts ...personnelrelcustomerOption) *PersonnelRelCustomerMutation {
	m := &PersonnelRelCustomerMutation{
		config:        c,
		op:            op,
		typ:           TypePersonnelRelCustomer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPersonnelRelCustomerID sets the ID field of the mutation.
func withPersonnelRelCustomerID(id uuid.UUID) personnelrelcustomerOption {
	return func(m *PersonnelRelCustomerMutation) {
		var (
			err   error
			once  sync.Once
			value *PersonnelRelCustomer
		)
		m.oldValue = func(ctx context.Context) (*PersonnelRelCustomer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PersonnelRelCustomer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPersonnelRelCustomer sets the old PersonnelRelCustomer of the mutation.
func withPersonnelRelCustomer(node *PersonnelRelCustomer) personnelrelcustomerOption {
	return func(m *PersonnelRelCustomerMutation) {
		m.oldValue = func(context.Context) (*PersonnelRelCustomer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PersonnelRelCustomerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PersonnelRelCustomerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PersonnelRelCustomer entities.
func (m *PersonnelRelCustomerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PersonnelRelCustomerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PersonnelRelCustomerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PersonnelRelCustomer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDescription sets the "description" field.
func (m *PersonnelRelCustomerMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PersonnelRelCustomerMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the PersonnelRelCustomer entity.
// If the PersonnelRelCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonnelRelCustomerMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *PersonnelRelCustomerMutation) ResetDescription() {
	m.description = nil
}

// SetPrice sets the "price" field.
func (m *PersonnelRelCustomerMutation) SetPrice(f float64) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *PersonnelRelCustomerMutation) Price() (r float64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the PersonnelRelCustomer entity.
// If the PersonnelRelCustomer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonnelRelCustomerMutation) OldPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *PersonnelRelCustomerMutation) AddPrice(f float64) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *PersonnelRelCustomerMutation) AddedPrice() (r float64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *PersonnelRelCustomerMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by id.
func (m *PersonnelRelCustomerMutation) SetPersonnelID(id uuid.UUID) {
	m.personnel = &id
}

// ClearPersonnel clears the "personnel" edge to the Personnel entity.
func (m *PersonnelRelCustomerMutation) ClearPersonnel() {
	m.clearedpersonnel = true
}

// PersonnelCleared reports if the "personnel" edge to the Personnel entity was cleared.
func (m *PersonnelRelCustomerMutation) PersonnelCleared() bool {
	return m.clearedpersonnel
}

// PersonnelID returns the "personnel" edge ID in the mutation.
func (m *PersonnelRelCustomerMutation) PersonnelID() (id uuid.UUID, exists bool) {
	if m.personnel != nil {
		return *m.personnel, true
	}
	return
}

// PersonnelIDs returns the "personnel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PersonnelID instead. It exists only for internal usage by the builders.
func (m *PersonnelRelCustomerMutation) PersonnelIDs() (ids []uuid.UUID) {
	if id := m.personnel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPersonnel resets all changes to the "personnel" edge.
func (m *PersonnelRelCustomerMutation) ResetPersonnel() {
	m.personnel = nil
	m.clearedpersonnel = false
}

// SetCustomerID sets the "customer" edge to the Customer entity by id.
func (m *PersonnelRelCustomerMutation) SetCustomerID(id uuid.UUID) {
	m.customer = &id
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (m *PersonnelRelCustomerMutation) ClearCustomer() {
	m.clearedcustomer = true
}

// CustomerCleared reports if the "customer" edge to the Customer entity was cleared.
func (m *PersonnelRelCustomerMutation) CustomerCleared() bool {
	return m.clearedcustomer
}

// CustomerID returns the "customer" edge ID in the mutation.
func (m *PersonnelRelCustomerMutation) CustomerID() (id uuid.UUID, exists bool) {
	if m.customer != nil {
		return *m.customer, true
	}
	return
}

// CustomerIDs returns the "customer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CustomerID instead. It exists only for internal usage by the builders.
func (m *PersonnelRelCustomerMutation) CustomerIDs() (ids []uuid.UUID) {
	if id := m.customer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCustomer resets all changes to the "customer" edge.
func (m *PersonnelRelCustomerMutation) ResetCustomer() {
	m.customer = nil
	m.clearedcustomer = false
}

// Where appends a list predicates to the PersonnelRelCustomerMutation builder.
func (m *PersonnelRelCustomerMutation) Where(ps ...predicate.PersonnelRelCustomer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PersonnelRelCustomerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PersonnelRelCustomerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PersonnelRelCustomer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PersonnelRelCustomerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PersonnelRelCustomerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PersonnelRelCustomer).
func (m *PersonnelRelCustomerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PersonnelRelCustomerMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.description != nil {
		fields = append(fields, personnelrelcustomer.FieldDescription)
	}
	if m.price != nil {
		fields = append(fields, personnelrelcustomer.FieldPrice)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PersonnelRelCustomerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case personnelrelcustomer.FieldDescription:
		return m.Description()
	case personnelrelcustomer.FieldPrice:
		return m.Price()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PersonnelRelCustomerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case personnelrelcustomer.FieldDescription:
		return m.OldDescription(ctx)
	case personnelrelcustomer.FieldPrice:
		return m.OldPrice(ctx)
	}
	return nil, fmt.Errorf("unknown PersonnelRelCustomer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonnelRelCustomerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case personnelrelcustomer.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case personnelrelcustomer.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	}
	return fmt.Errorf("unknown PersonnelRelCustomer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PersonnelRelCustomerMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, personnelrelcustomer.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PersonnelRelCustomerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case personnelrelcustomer.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonnelRelCustomerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case personnelrelcustomer.FieldPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown PersonnelRelCustomer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PersonnelRelCustomerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PersonnelRelCustomerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PersonnelRelCustomerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown PersonnelRelCustomer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PersonnelRelCustomerMutation) ResetField(name string) error {
	switch name {
	case personnelrelcustomer.FieldDescription:
		m.ResetDescription()
		return nil
	case personnelrelcustomer.FieldPrice:
		m.ResetPrice()
		return nil
	}
	return fmt.Errorf("unknown PersonnelRelCustomer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PersonnelRelCustomerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.personnel != nil {
		edges = append(edges, personnelrelcustomer.EdgePersonnel)
	}
	if m.customer != nil {
		edges = append(edges, personnelrelcustomer.EdgeCustomer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PersonnelRelCustomerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case personnelrelcustomer.EdgePersonnel:
		if id := m.personnel; id != nil {
			return []ent.Value{*id}
		}
	case personnelrelcustomer.EdgeCustomer:
		if id := m.customer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PersonnelRelCustomerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PersonnelRelCustomerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PersonnelRelCustomerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedpersonnel {
		edges = append(edges, personnelrelcustomer.EdgePersonnel)
	}
	if m.clearedcustomer {
		edges = append(edges, personnelrelcustomer.EdgeCustomer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PersonnelRelCustomerMutation) EdgeCleared(name string) bool {
	switch name {
	case personnelrelcustomer.EdgePersonnel:
		return m.clearedpersonnel
	case personnelrelcustomer.EdgeCustomer:
		return m.clearedcustomer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PersonnelRelCustomerMutation) ClearEdge(name string) error {
	switch name {
	case personnelrelcustomer.EdgePersonnel:
		m.ClearPersonnel()
		return nil
	case personnelrelcustomer.EdgeCustomer:
		m.ClearCustomer()
		return nil
	}
	return fmt.Errorf("unknown PersonnelRelCustomer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PersonnelRelCustomerMutation) ResetEdge(name string) error {
	switch name {
	case personnelrelcustomer.EdgePersonnel:
		m.ResetPersonnel()
		return nil
	case personnelrelcustomer.EdgeCustomer:
		m.ResetCustomer()
		return nil
	}
	return fmt.Errorf("unknown PersonnelRelCustomer edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	username      *string
	password      *string
	role          *string
	created_at    *time.Time
	updated_at    *time.Time
	status        *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(s string) {
	m.role = &s
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r string, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetStatus sets the "status" field.
func (m *UserMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *UserMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *UserMutation) ResetStatus() {
	m.status = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.status != nil {
		fields = append(fields, user.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldRole:
		return m.Role()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
