// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/hmertakyatan/gymapi/ent/customer"
)

// Customer is the model entity for the Customer schema.
type Customer struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// FullName holds the value of the "full_name" field.
	FullName string `json:"full_name,omitempty"`
	// BirthDate holds the value of the "birth_date" field.
	BirthDate time.Time `json:"birth_date,omitempty"`
	// RegistrationDate holds the value of the "registration_date" field.
	RegistrationDate time.Time `json:"registration_date,omitempty"`
	// CustomerPictureURL holds the value of the "customer_picture_url" field.
	CustomerPictureURL string `json:"customer_picture_url,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomerQuery when eager-loading is set.
	Edges        CustomerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CustomerEdges holds the relations/edges for other nodes in the graph.
type CustomerEdges struct {
	// Membership holds the value of the membership edge.
	Membership []*Membership `json:"membership,omitempty"`
	// PersonnelRelCustomer holds the value of the personnel_rel_customer edge.
	PersonnelRelCustomer []*PersonnelRelCustomer `json:"personnel_rel_customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// MembershipOrErr returns the Membership value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) MembershipOrErr() ([]*Membership, error) {
	if e.loadedTypes[0] {
		return e.Membership, nil
	}
	return nil, &NotLoadedError{edge: "membership"}
}

// PersonnelRelCustomerOrErr returns the PersonnelRelCustomer value or an error if the edge
// was not loaded in eager-loading.
func (e CustomerEdges) PersonnelRelCustomerOrErr() ([]*PersonnelRelCustomer, error) {
	if e.loadedTypes[1] {
		return e.PersonnelRelCustomer, nil
	}
	return nil, &NotLoadedError{edge: "personnel_rel_customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Customer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customer.FieldStatus:
			values[i] = new(sql.NullBool)
		case customer.FieldFullName, customer.FieldCustomerPictureURL:
			values[i] = new(sql.NullString)
		case customer.FieldBirthDate, customer.FieldRegistrationDate:
			values[i] = new(sql.NullTime)
		case customer.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Customer fields.
func (c *Customer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customer.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case customer.FieldFullName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field full_name", values[i])
			} else if value.Valid {
				c.FullName = value.String
			}
		case customer.FieldBirthDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birth_date", values[i])
			} else if value.Valid {
				c.BirthDate = value.Time
			}
		case customer.FieldRegistrationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field registration_date", values[i])
			} else if value.Valid {
				c.RegistrationDate = value.Time
			}
		case customer.FieldCustomerPictureURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_picture_url", values[i])
			} else if value.Valid {
				c.CustomerPictureURL = value.String
			}
		case customer.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = value.Bool
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Customer.
// This includes values selected through modifiers, order, etc.
func (c *Customer) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryMembership queries the "membership" edge of the Customer entity.
func (c *Customer) QueryMembership() *MembershipQuery {
	return NewCustomerClient(c.config).QueryMembership(c)
}

// QueryPersonnelRelCustomer queries the "personnel_rel_customer" edge of the Customer entity.
func (c *Customer) QueryPersonnelRelCustomer() *PersonnelRelCustomerQuery {
	return NewCustomerClient(c.config).QueryPersonnelRelCustomer(c)
}

// Update returns a builder for updating this Customer.
// Note that you need to call Customer.Unwrap() before calling this method if this Customer
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Customer) Update() *CustomerUpdateOne {
	return NewCustomerClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Customer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Customer) Unwrap() *Customer {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Customer is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Customer) String() string {
	var builder strings.Builder
	builder.WriteString("Customer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("full_name=")
	builder.WriteString(c.FullName)
	builder.WriteString(", ")
	builder.WriteString("birth_date=")
	builder.WriteString(c.BirthDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("registration_date=")
	builder.WriteString(c.RegistrationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("customer_picture_url=")
	builder.WriteString(c.CustomerPictureURL)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Customers is a parsable slice of Customer.
type Customers []*Customer
