// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/hmertakyatan/gymapi/ent/customer"
	"github.com/hmertakyatan/gymapi/ent/personnel"
	"github.com/hmertakyatan/gymapi/ent/personnelrelcustomer"
	"github.com/hmertakyatan/gymapi/ent/predicate"
)

// PersonnelRelCustomerUpdate is the builder for updating PersonnelRelCustomer entities.
type PersonnelRelCustomerUpdate struct {
	config
	hooks    []Hook
	mutation *PersonnelRelCustomerMutation
}

// Where appends a list predicates to the PersonnelRelCustomerUpdate builder.
func (prcu *PersonnelRelCustomerUpdate) Where(ps ...predicate.PersonnelRelCustomer) *PersonnelRelCustomerUpdate {
	prcu.mutation.Where(ps...)
	return prcu
}

// SetDescription sets the "description" field.
func (prcu *PersonnelRelCustomerUpdate) SetDescription(s string) *PersonnelRelCustomerUpdate {
	prcu.mutation.SetDescription(s)
	return prcu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (prcu *PersonnelRelCustomerUpdate) SetNillableDescription(s *string) *PersonnelRelCustomerUpdate {
	if s != nil {
		prcu.SetDescription(*s)
	}
	return prcu
}

// SetPrice sets the "price" field.
func (prcu *PersonnelRelCustomerUpdate) SetPrice(f float64) *PersonnelRelCustomerUpdate {
	prcu.mutation.ResetPrice()
	prcu.mutation.SetPrice(f)
	return prcu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (prcu *PersonnelRelCustomerUpdate) SetNillablePrice(f *float64) *PersonnelRelCustomerUpdate {
	if f != nil {
		prcu.SetPrice(*f)
	}
	return prcu
}

// AddPrice adds f to the "price" field.
func (prcu *PersonnelRelCustomerUpdate) AddPrice(f float64) *PersonnelRelCustomerUpdate {
	prcu.mutation.AddPrice(f)
	return prcu
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by ID.
func (prcu *PersonnelRelCustomerUpdate) SetPersonnelID(id uuid.UUID) *PersonnelRelCustomerUpdate {
	prcu.mutation.SetPersonnelID(id)
	return prcu
}

// SetPersonnel sets the "personnel" edge to the Personnel entity.
func (prcu *PersonnelRelCustomerUpdate) SetPersonnel(p *Personnel) *PersonnelRelCustomerUpdate {
	return prcu.SetPersonnelID(p.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (prcu *PersonnelRelCustomerUpdate) SetCustomerID(id uuid.UUID) *PersonnelRelCustomerUpdate {
	prcu.mutation.SetCustomerID(id)
	return prcu
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (prcu *PersonnelRelCustomerUpdate) SetCustomer(c *Customer) *PersonnelRelCustomerUpdate {
	return prcu.SetCustomerID(c.ID)
}

// Mutation returns the PersonnelRelCustomerMutation object of the builder.
func (prcu *PersonnelRelCustomerUpdate) Mutation() *PersonnelRelCustomerMutation {
	return prcu.mutation
}

// ClearPersonnel clears the "personnel" edge to the Personnel entity.
func (prcu *PersonnelRelCustomerUpdate) ClearPersonnel() *PersonnelRelCustomerUpdate {
	prcu.mutation.ClearPersonnel()
	return prcu
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (prcu *PersonnelRelCustomerUpdate) ClearCustomer() *PersonnelRelCustomerUpdate {
	prcu.mutation.ClearCustomer()
	return prcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (prcu *PersonnelRelCustomerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, prcu.sqlSave, prcu.mutation, prcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (prcu *PersonnelRelCustomerUpdate) SaveX(ctx context.Context) int {
	affected, err := prcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (prcu *PersonnelRelCustomerUpdate) Exec(ctx context.Context) error {
	_, err := prcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcu *PersonnelRelCustomerUpdate) ExecX(ctx context.Context) {
	if err := prcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prcu *PersonnelRelCustomerUpdate) check() error {
	if _, ok := prcu.mutation.PersonnelID(); prcu.mutation.PersonnelCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PersonnelRelCustomer.personnel"`)
	}
	if _, ok := prcu.mutation.CustomerID(); prcu.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PersonnelRelCustomer.customer"`)
	}
	return nil
}

func (prcu *PersonnelRelCustomerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := prcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(personnelrelcustomer.Table, personnelrelcustomer.Columns, sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID))
	if ps := prcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := prcu.mutation.Description(); ok {
		_spec.SetField(personnelrelcustomer.FieldDescription, field.TypeString, value)
	}
	if value, ok := prcu.mutation.Price(); ok {
		_spec.SetField(personnelrelcustomer.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := prcu.mutation.AddedPrice(); ok {
		_spec.AddField(personnelrelcustomer.FieldPrice, field.TypeFloat64, value)
	}
	if prcu.mutation.PersonnelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personnelrelcustomer.PersonnelTable,
			Columns: []string{personnelrelcustomer.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnel.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prcu.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personnelrelcustomer.PersonnelTable,
			Columns: []string{personnelrelcustomer.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if prcu.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personnelrelcustomer.CustomerTable,
			Columns: []string{personnelrelcustomer.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prcu.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personnelrelcustomer.CustomerTable,
			Columns: []string{personnelrelcustomer.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, prcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personnelrelcustomer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	prcu.mutation.done = true
	return n, nil
}

// PersonnelRelCustomerUpdateOne is the builder for updating a single PersonnelRelCustomer entity.
type PersonnelRelCustomerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonnelRelCustomerMutation
}

// SetDescription sets the "description" field.
func (prcuo *PersonnelRelCustomerUpdateOne) SetDescription(s string) *PersonnelRelCustomerUpdateOne {
	prcuo.mutation.SetDescription(s)
	return prcuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (prcuo *PersonnelRelCustomerUpdateOne) SetNillableDescription(s *string) *PersonnelRelCustomerUpdateOne {
	if s != nil {
		prcuo.SetDescription(*s)
	}
	return prcuo
}

// SetPrice sets the "price" field.
func (prcuo *PersonnelRelCustomerUpdateOne) SetPrice(f float64) *PersonnelRelCustomerUpdateOne {
	prcuo.mutation.ResetPrice()
	prcuo.mutation.SetPrice(f)
	return prcuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (prcuo *PersonnelRelCustomerUpdateOne) SetNillablePrice(f *float64) *PersonnelRelCustomerUpdateOne {
	if f != nil {
		prcuo.SetPrice(*f)
	}
	return prcuo
}

// AddPrice adds f to the "price" field.
func (prcuo *PersonnelRelCustomerUpdateOne) AddPrice(f float64) *PersonnelRelCustomerUpdateOne {
	prcuo.mutation.AddPrice(f)
	return prcuo
}

// SetPersonnelID sets the "personnel" edge to the Personnel entity by ID.
func (prcuo *PersonnelRelCustomerUpdateOne) SetPersonnelID(id uuid.UUID) *PersonnelRelCustomerUpdateOne {
	prcuo.mutation.SetPersonnelID(id)
	return prcuo
}

// SetPersonnel sets the "personnel" edge to the Personnel entity.
func (prcuo *PersonnelRelCustomerUpdateOne) SetPersonnel(p *Personnel) *PersonnelRelCustomerUpdateOne {
	return prcuo.SetPersonnelID(p.ID)
}

// SetCustomerID sets the "customer" edge to the Customer entity by ID.
func (prcuo *PersonnelRelCustomerUpdateOne) SetCustomerID(id uuid.UUID) *PersonnelRelCustomerUpdateOne {
	prcuo.mutation.SetCustomerID(id)
	return prcuo
}

// SetCustomer sets the "customer" edge to the Customer entity.
func (prcuo *PersonnelRelCustomerUpdateOne) SetCustomer(c *Customer) *PersonnelRelCustomerUpdateOne {
	return prcuo.SetCustomerID(c.ID)
}

// Mutation returns the PersonnelRelCustomerMutation object of the builder.
func (prcuo *PersonnelRelCustomerUpdateOne) Mutation() *PersonnelRelCustomerMutation {
	return prcuo.mutation
}

// ClearPersonnel clears the "personnel" edge to the Personnel entity.
func (prcuo *PersonnelRelCustomerUpdateOne) ClearPersonnel() *PersonnelRelCustomerUpdateOne {
	prcuo.mutation.ClearPersonnel()
	return prcuo
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (prcuo *PersonnelRelCustomerUpdateOne) ClearCustomer() *PersonnelRelCustomerUpdateOne {
	prcuo.mutation.ClearCustomer()
	return prcuo
}

// Where appends a list predicates to the PersonnelRelCustomerUpdate builder.
func (prcuo *PersonnelRelCustomerUpdateOne) Where(ps ...predicate.PersonnelRelCustomer) *PersonnelRelCustomerUpdateOne {
	prcuo.mutation.Where(ps...)
	return prcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (prcuo *PersonnelRelCustomerUpdateOne) Select(field string, fields ...string) *PersonnelRelCustomerUpdateOne {
	prcuo.fields = append([]string{field}, fields...)
	return prcuo
}

// Save executes the query and returns the updated PersonnelRelCustomer entity.
func (prcuo *PersonnelRelCustomerUpdateOne) Save(ctx context.Context) (*PersonnelRelCustomer, error) {
	return withHooks(ctx, prcuo.sqlSave, prcuo.mutation, prcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (prcuo *PersonnelRelCustomerUpdateOne) SaveX(ctx context.Context) *PersonnelRelCustomer {
	node, err := prcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (prcuo *PersonnelRelCustomerUpdateOne) Exec(ctx context.Context) error {
	_, err := prcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcuo *PersonnelRelCustomerUpdateOne) ExecX(ctx context.Context) {
	if err := prcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prcuo *PersonnelRelCustomerUpdateOne) check() error {
	if _, ok := prcuo.mutation.PersonnelID(); prcuo.mutation.PersonnelCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PersonnelRelCustomer.personnel"`)
	}
	if _, ok := prcuo.mutation.CustomerID(); prcuo.mutation.CustomerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PersonnelRelCustomer.customer"`)
	}
	return nil
}

func (prcuo *PersonnelRelCustomerUpdateOne) sqlSave(ctx context.Context) (_node *PersonnelRelCustomer, err error) {
	if err := prcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(personnelrelcustomer.Table, personnelrelcustomer.Columns, sqlgraph.NewFieldSpec(personnelrelcustomer.FieldID, field.TypeUUID))
	id, ok := prcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PersonnelRelCustomer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := prcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personnelrelcustomer.FieldID)
		for _, f := range fields {
			if !personnelrelcustomer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != personnelrelcustomer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := prcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := prcuo.mutation.Description(); ok {
		_spec.SetField(personnelrelcustomer.FieldDescription, field.TypeString, value)
	}
	if value, ok := prcuo.mutation.Price(); ok {
		_spec.SetField(personnelrelcustomer.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := prcuo.mutation.AddedPrice(); ok {
		_spec.AddField(personnelrelcustomer.FieldPrice, field.TypeFloat64, value)
	}
	if prcuo.mutation.PersonnelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personnelrelcustomer.PersonnelTable,
			Columns: []string{personnelrelcustomer.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnel.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prcuo.mutation.PersonnelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personnelrelcustomer.PersonnelTable,
			Columns: []string{personnelrelcustomer.PersonnelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personnel.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if prcuo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personnelrelcustomer.CustomerTable,
			Columns: []string{personnelrelcustomer.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := prcuo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personnelrelcustomer.CustomerTable,
			Columns: []string{personnelrelcustomer.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PersonnelRelCustomer{config: prcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, prcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personnelrelcustomer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	prcuo.mutation.done = true
	return _node, nil
}
